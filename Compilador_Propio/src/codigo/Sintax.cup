package codigo;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

parser code {:
     ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("En la linea: " + (s.left) + " y Columna: " +(s.right)+ " con el simbolo= "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }
:} ;
terminal TKN_FUNCION,TKN_COMA,TKN_IGUAL ,TKN_MAIN  ,TKN_IMPRIMIR ;
terminal TKN_DIGITO,TKN_IF ,TKN_DIGITOFLOAT ,TKN_WHILE,TKN_PARENTESISI ,TKN_PARENTESISD ,TKN_LLAVEIZ ,TKN_LLAVEDER ; 
terminal TKN_COMILLA ,TKN_OPADICION,TKN_AND,TKN_OR, TKN_FLOAT,TKN_OPREL ,TKN_MULTI ,TKN_FOR ,TKN_VOID,TKN_RETURN;
terminal TKN_DOSPUNTOS, TKN_SWITCH ,TKN_CASE ,TKN_ENDCASE ,TKN_DEFAULT,TKN_LETRA,TKN_FALSE,TKN_TRUE ,TKN_INT ,TKN_CHAR ,TKN_BOOLEAN ,TKN_ASIGNACCION,TKN_ID;
non terminal TIPOPRI;
non terminal Nodo INICIO,LISTA_ARGS,WHILE,TIPOSW,STATEMENTS,CASOSA,CASOS,FUNCIONES,SWITCH,FOR,IF,FUNCION,TIPO,VALOR,IMPRIMIR,LLAMADO,DECLARACION,OPCONDICION, CONDICION,CONDICIONP;

//GRAMATICA PARA EL MAIN Y DESPUES FUNCIONES
start with INICIO;
INICIO ::=   TKN_MAIN:id TKN_LLAVEIZ STATEMENTS:b TKN_LLAVEDER FUNCIONES:d
{:
        parser.gramas.add("Bloque Main Reconocido satisfactoriamente");
        //System.out.println(id);
        Nodo nodo = new Nodo(id.toString(),parser.cont);
        parser.cont++;
        nodo.addHijo(b);
        //System.out.println("nodo b");
        nodo.addHijo(d); 
        //System.out.println("nodo d");       
        parser.raiz=nodo;
:}|TKN_ID TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER FUNCIONES {:parser.errores.add("\nFalta el Main");:}
  |TKN_MAIN error STATEMENTS TKN_LLAVEDER FUNCIONES {:parser.errores.add("\nfalta '{' en el main");:}
;
// FUNCIONES O NO DESPUES DEL MAIN
FUNCIONES::= FUNCION:i FUNCIONES:s
            {:
                Nodo nodo = new Nodo("FUNCION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);   
                nodo.addHijo(i);
                //System.out.println("nodo i");
                RESULT=nodo;
                :}
            |    {:
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    RESULT = node;
                :}
;
//GRAMATICA PARA FUNCIONES

FUNCION::= TKN_FUNCION TIPO:s TKN_ID:id TKN_PARENTESISI LISTA_ARGS:lis TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS:b TKN_RETURN TKN_ID TKN_LLAVEDER 
{:parser.gramas.add("Una Funcion Reconocida satisfactoriamente");    
                Nodo nodo = new Nodo(id.toString(),parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(lis);
                
                nodo.addHijo(b);//statements
         
                RESULT=nodo;
:}
            |error TIPO TKN_ID  TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER {:parser.errores.add("Falta poner 'Fun' ");:} 
            |TKN_FUNCION TIPO error TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER {:parser.errores.add("No se puso un ID valido de funcion");:} 
            |TKN_FUNCION TIPO TKN_ID error LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER {:parser.errores.add("No se puso un '(' en funcion");:}
;
//LLAMADO DE FUNCIONES
LLAMADO::= TKN_ID:id TKN_PARENTESISI LISTA_ARGS:li TKN_PARENTESISD {:
                parser.gramas.add("Un Llamado de Funcion Reconocido satisfactoriamente");
                Nodo nodo = new Nodo("LLAMADO",parser.cont);
                parser.cont++;                
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(li);
                RESULT=nodo;
                 :}
;
// TIPO PARA CUALQUIER COSA
TIPO::=
    TKN_VOID:s
        {:
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
        :}
    |TKN_INT:s
        {:
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;:}
    |TKN_CHAR:s{:
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;:}
    |TKN_BOOLEAN:s{:
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;:}
    |TKN_FLOAT:s{:
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;:}
    |error {:parser.errores.add("No se puso un tipo valido de funcion");:}
;
//STATEMENTS!! OJO SIEMPRE AGREGAR NUEVAS GRAMATICAS PARA QUE NO TE TIRE LOS WARININGS
STATEMENTS ::= 
            DECLARACION:i STATEMENTS:s       
            {:
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            :}    
            |FOR:i STATEMENTS:s
            {:
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            :}    
            |IF:i STATEMENTS:s
            {:
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            :}   
            |WHILE:i STATEMENTS:s
             {:
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            :} 
            |LLAMADO:i STATEMENTS:s
            {:
            Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            :}          
            |SWITCH:i STATEMENTS:s
            {:
            Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            :} 
            |IMPRIMIR:i STATEMENTS:s
            {:
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            :}
            |{:
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("VACIO",parser.cont++));
                    parser.cont++;
                    RESULT = node;
                :}
;
//BLOQUE IF
//revisar errores de asignaciones
IF::=   
TKN_IF TKN_PARENTESISI CONDICION:di2 TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS:s TKN_LLAVEDER {:
    parser.gramas.add("Un Bloque IF Reconocido satisfactoriamente");
    Nodo nodo= new Nodo("IF",parser.cont);
    parser.cont++;
    nodo.addHijo(di2);
    nodo.addHijo(s);
    RESULT=nodo;
:}
|TKN_ID TKN_PARENTESISI CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER {:parser.errores.add("Falta poner 'IF' o se escribio mal ");:}
|TKN_IF error CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER {:parser.errores.add("Falta poner '(' ");:}
|TKN_IF TKN_PARENTESISI CONDICION error TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER {:parser.errores.add("Falta poner ')' ");:}
|TKN_IF TKN_PARENTESISI CONDICION TKN_PARENTESISD error STATEMENTS TKN_LLAVEDER {:parser.errores.add("Falta poner '{' ");:}
;
//DECLARACIONES
//revisar errores de DECLARACIONES
DECLARACION::=
    TKN_INT TKN_ID:i TKN_ASIGNACCION TKN_DIGITO:di
    {:parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
    Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;
    :}
//errores dde la primera que es de ints    
    |error TKN_ID TKN_ASIGNACCION TKN_DIGITO {:parser.errores.add("falta el tipo Int de declaracion");:}
    |TKN_INT TKN_ID error TKN_DIGITO {:parser.errores.add("falta '<--' de declaracion");:}
    |TKN_INT TKN_ID TKN_ASIGNACCION error {:parser.errores.add("falta un valor para la declaracion");:}

    |TKN_BOOLEAN TKN_ID:i TKN_ASIGNACCION TKN_TRUE:di
{:parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;:}
    |error TKN_ID TKN_ASIGNACCION TKN_TRUE{:parser.errores.add("falta el tipo BOOLEAN de declaracion");:}
    |TKN_BOOLEAN TKN_ID error TKN_TRUE {:parser.errores.add("falta '<--' de declaracion");:}
    |TKN_BOOLEAN TKN_ID TKN_ASIGNACCION error {:parser.errores.add("falta un valor TRUE para la declaracion");:}
    
|TKN_BOOLEAN TKN_ID:i TKN_ASIGNACCION TKN_FALSE:di 
{:parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;
:}

    |TKN_CHAR  TKN_ID:i  TKN_ASIGNACCION TKN_LETRA:di 
{:parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;
:}
|error  TKN_ID  TKN_ASIGNACCION TKN_LETRA {:parser.errores.add("no se puso el tipo char");:} 
|TKN_CHAR  error  TKN_ASIGNACCION TKN_LETRA {:parser.errores.add("no se puso el id");:} 
|TKN_CHAR  TKN_ID  error TKN_LETRA {:parser.errores.add("no se puso '<--'");:} 
|TKN_CHAR  TKN_ID  TKN_ASIGNACCION error {:parser.errores.add("no se puso un valor al char");:} 


|TKN_FLOAT TKN_ID:i TKN_ASIGNACCION TKN_DIGITOFLOAT:di
{:parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;
:}
|error TKN_ID TKN_ASIGNACCION TKN_DIGITOFLOAT {:parser.errores.add("falta el tipo FLOAT de declaracion");:}
    |TKN_FLOAT TKN_ID error TKN_DIGITOFLOAT {:parser.errores.add("falta '<--' de declaracion");:}
    |TKN_FLOAT TKN_ID TKN_ASIGNACCION error {:parser.errores.add("falta un valor FLOAT para la declaracion");:}

;
//tipo declaracion para aint bool bool y char y tipo de salida tkn_digito true false letra
//BLOQUE FOOOR
FOR ::=
    TKN_FOR TKN_PARENTESISI TKN_DIGITO:di TKN_DOSPUNTOS:dos TKN_DIGITO:di2 TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS:s TKN_LLAVEDER  
{:
        parser.gramas.add("Un Bloque FOR Reconocido satisfactoriamente");
        Nodo nodo = new Nodo("FOR",parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(di.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(new Nodo (dos.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(new Nodo (di2.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(s);    
        RESULT=nodo;
:}

    |TKN_ID TKN_PARENTESISI TKN_DIGITO TKN_DOSPUNTOS TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER {:parser.errores.add(" Falta poner FOR o se escribio mal");:}
    |TKN_FOR TKN_PARENTESISI error TKN_DOSPUNTOS TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER {:parser.errores.add(" Falta poner un valor de inicio en el for");:}
    |TKN_FOR TKN_PARENTESISI TKN_DIGITO error TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER {:parser.errores.add(" Falta poner '::'en el for");:}
;

//LISTA DE ARGUMENTOS
LISTA_ARGS::= VALOR:v
            {:
            Nodo nodo = new Nodo("ARGUMENTOS",parser.cont);
            parser.cont++;
            nodo.addHijo(v);
            RESULT=nodo;
            :}
        | VALOR:v TKN_COMA LISTA_ARGS:s 
        {:
            Nodo nodo =new Nodo("ARGUMENTOS",parser.cont);
            parser.cont++;
            nodo.addHijo(v);
            nodo.addHijo(s);
            RESULT= nodo;
        :}
;
//bloque while
WHILE::=
TKN_WHILE TKN_PARENTESISI CONDICION:C TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS:s TKN_LLAVEDER 
        {:parser.gramas.add("Un Bloque While Reconocido satisfactoriamente");
        Nodo nodo = new Nodo("WHILE",parser.cont);
        parser.cont++;
        nodo.addHijo(C);
        nodo.addHijo(s);
        RESULT=nodo;

        :}
;

//bloque switch
SWITCH::=
    
TKN_SWITCH TKN_PARENTESISI TIPOSW:s TKN_PARENTESISD TKN_LLAVEIZ CASOSA:cas TKN_LLAVEDER  
{:parser.gramas.add("Un Bloque Switch Reconocido satisfactoriamente");
        Nodo nodo= new Nodo("SWITCH",parser.cont);
        parser.cont++;
        nodo.addHijo(s);
        nodo.addHijo(cas);
        RESULT=nodo;
:} 
|error TKN_PARENTESISI TIPOSW TKN_PARENTESISD TKN_LLAVEIZ {:parser.errores.add(" Falta el enunciado switch\n");:}
|TKN_SWITCH error TIPOSW TKN_PARENTESISD TKN_LLAVEIZ {:parser.errores.add(" Falta un ( \n");:}
|TKN_SWITCH TKN_PARENTESISI error TKN_PARENTESISD TKN_LLAVEIZ {:parser.errores.add(" no ingreso un tipo valido en el switch\n");:}
|TKN_SWITCH TKN_PARENTESISI TIPOSW error TKN_LLAVEIZ {:parser.errores.add(" No se puso ')'\n");:}
|TKN_SWITCH TKN_PARENTESISI TIPOSW TKN_PARENTESISD error {:parser.errores.add(" No se puso '{' en el Switch \n");:}

;
TIPOSW::=
    TKN_ID:s
{:
    Nodo nodo = new Nodo(s.toString(),parser.cont);
    parser.cont++;
    RESULT=nodo;

:}
    |TKN_LETRA:s{:
    Nodo nodo = new Nodo(s.toString(),parser.cont);
    parser.cont++;
    RESULT=nodo;
:}
    |TKN_DIGITO:s{:
    Nodo nodo = new Nodo(s.toString(),parser.cont);
    parser.cont++;
    RESULT=nodo;
:}
    
;
//CASOS
CASOSA::=
    TKN_CASE TIPOSW:t TKN_DOSPUNTOS STATEMENTS:s TKN_ENDCASE CASOS :ca
{:
    Nodo nodo = new Nodo("Caso:" ,parser.cont);
    parser.cont++;
    nodo.addHijo(t);
    nodo.addHijo(s);
    nodo.addHijo(ca);
    RESULT=nodo;
:}
    |error TIPOSW TKN_DOSPUNTOS STATEMENTS TKN_ENDCASE CASOS {:parser.errores.add(" No se puso Cas \n");:}
    |TKN_CASE error TKN_DOSPUNTOS STATEMENTS TKN_ENDCASE CASOS {:parser.errores.add(" No se puso valor para el cas \n");:}
    |TKN_CASE TIPOSW error STATEMENTS TKN_ENDCASE CASOS {:parser.errores.add(" No se puso valor '::' para el cas \n");:}
;
//CASO SOLO, DEFAULT O VACIO
CASOS::=CASOSA:cas
{:
    Nodo nodo= new Nodo("SubCaso:",parser.cont);
    parser.cont++;    
    nodo.addHijo(cas);
    RESULT=nodo;
:}
    |TKN_DEFAULT TKN_DOSPUNTOS STATEMENTS:s
{:
        Nodo nodo = new Nodo("DEFAULT",parser.cont);
        parser.cont++;
        nodo.addHijo(s);
        RESULT=nodo;
:}|error TKN_DOSPUNTOS STATEMENTS {:parser.errores.add("falta el Def");:}
  |TKN_DEFAULT error STATEMENTS {:parser.errores.add("falta ::");:}
;

//IMPRIMIR
IMPRIMIR::=

TKN_IMPRIMIR TKN_PARENTESISI TKN_COMILLA TIPOPRI TKN_COMILLA TKN_PARENTESISD 
{:parser.gramas.add("Una Impresion Reconocida satisfactoriamente");
    Nodo nodo = new Nodo("SOUT",parser.cont);
    parser.cont++;
    RESULT=nodo;
:}
|TKN_ID TKN_PARENTESISI TKN_COMILLA TIPOPRI TKN_COMILLA TKN_PARENTESISD {:parser.errores.add(" Sout mal escrito\n");:}
|TKN_IMPRIMIR TKN_PARENTESISI error TIPOPRI TKN_COMILLA TKN_PARENTESISD{:parser.errores.add(" falta una '\n");:}
|TKN_IMPRIMIR TKN_PARENTESISI TKN_COMILLA  TIPOPRI error TKN_PARENTESISD{:parser.errores.add(" falta una '\n");:}
|TKN_IMPRIMIR error TKN_COMILLA TIPOPRI TKN_COMILLA TKN_PARENTESISD {:parser.errores.add(" falta un '(' \n");:}
|TKN_IMPRIMIR TKN_PARENTESISI TKN_COMILLA TIPOPRI TKN_COMILLA error {:parser.errores.add(" falta un ')' \n");:}
;
TIPOPRI::=
    TKN_DIGITO
    |TKN_ID
    |TKN_LETRA
;

//CONDICIONES
/*CONDICION::= VALOR:v1 TKN_AND:id VALOR:v2
            {:
            Nodo nodo=new Nodo("CONDICION",parser.cont);
            parser.cont++;
            nodo.addHijo(v1);
            nodo.addHijo(new Nodo(id.toString(),parser.cont));
            parser.cont++;
            nodo.addHijo(v2);
            RESULT=nodo;
            :}
            |VALOR TKN_OR VALOR
            |VALOR TKN_OPREL VALOR
            |VALOR TKN_IGUAL VALOR
            

;*/
VALOR::= TKN_DIGITO :id
            {:
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            :}
                | TKN_TRUE :id
            {:
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            :}
                | TKN_FALSE:id
            {:
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            :}
                | TKN_ID  :id
            {:
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            :}             
;


CONDICION ::= CONDICIONP:s TKN_AND:id CONDICION:o
                {:
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                :}
            | CONDICIONP:s TKN_OR:id CONDICION:o
                {:
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(o);
                RESULT=nodo;              
                :}
            | CONDICIONP:s
                {: Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                RESULT=nodo;
                :}
            
;
CONDICIONP::= VALOR:v OPCONDICION:o VALOR:v2
           {:
                Nodo nodo = new Nodo("CONDICIONP",parser.cont);
                parser.cont++;
                nodo.addHijo(v);
                nodo.addHijo(o);
                nodo.addHijo(v2);
                RESULT=nodo;
            :}
;
OPCONDICION::= TKN_OPREL:id
           {:
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            :}
            | TKN_IGUAL :id
                {:
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            :}
;

