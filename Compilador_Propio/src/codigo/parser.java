
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 24 13:06:23 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 24 13:06:23 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\007\000\002\006" +
    "\004\000\002\006\002\000\002\010\015\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\027\002\000\002\014\005\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\030\002" +
    "\000\002\016\012\000\002\031\002\000\002\026\007\000" +
    "\002\026\006\000\002\026\006\000\002\026\006\000\002" +
    "\032\002\000\002\017\014\000\002\033\002\000\002\015" +
    "\007\000\002\023\003\000\002\023\005\000\002\023\002" +
    "\000\002\034\002\000\002\004\012\000\002\035\002\000" +
    "\002\020\012\000\002\005\010\000\002\007\003\000\002" +
    "\007\005\000\002\007\002\000\002\003\010\000\002\021" +
    "\005\000\002\021\005\000\002\021\003\000\002\022\005" +
    "\000\002\024\003\000\002\024\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\004\010\004\001\002\000\004\021\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\024\012\021\014\uffef\016\uffe1\033\uffe8\037\uffdf\046" +
    "\ufff7\047\ufff7\050\ufff7\052\uffe6\001\002\000\004\037\161" +
    "\001\002\000\024\012\021\014\uffef\016\uffe1\033\uffe8\037" +
    "\uffdf\046\ufff7\047\ufff7\050\ufff7\052\uffe6\001\002\000\004" +
    "\016\151\001\002\000\004\052\145\001\002\000\024\012" +
    "\021\014\uffef\016\uffe1\033\uffe8\037\uffdf\046\ufff7\047\ufff7" +
    "\050\ufff7\052\uffe6\001\002\000\004\033\133\001\002\000" +
    "\004\014\112\001\002\000\010\046\uffed\047\073\050\075" +
    "\001\002\000\024\012\021\014\uffef\016\uffe1\033\uffe8\037" +
    "\uffdf\046\ufff7\047\ufff7\050\ufff7\052\uffe6\001\002\000\004" +
    "\017\064\001\002\000\024\012\021\014\uffef\016\uffe1\033" +
    "\uffe8\037\uffdf\046\ufff7\047\ufff7\050\ufff7\052\uffe6\001\002" +
    "\000\024\012\021\014\uffef\016\uffe1\033\uffe8\037\uffdf\046" +
    "\ufff7\047\ufff7\050\ufff7\052\uffe6\001\002\000\024\012\021" +
    "\014\uffef\016\uffe1\033\uffe8\037\uffdf\046\ufff7\047\ufff7\050" +
    "\ufff7\052\uffe6\001\002\000\004\022\026\001\002\000\006" +
    "\002\ufffe\005\027\001\002\000\014\015\035\034\034\046" +
    "\036\047\033\050\037\001\002\000\006\002\ufffe\005\027" +
    "\001\002\000\004\002\000\001\002\000\004\002\uffff\001" +
    "\002\000\006\036\ufffb\052\ufffb\001\002\000\006\036\ufff8" +
    "\052\ufff8\001\002\000\006\036\ufff9\052\ufff9\001\002\000" +
    "\006\036\ufffc\052\ufffc\001\002\000\006\036\ufffa\052\ufffa" +
    "\001\002\000\004\052\041\001\002\000\004\017\042\001" +
    "\002\000\014\013\043\020\uffe2\044\044\045\050\052\047" +
    "\001\002\000\016\006\uffd2\007\uffd2\011\uffd2\020\uffd2\025" +
    "\uffd2\027\uffd2\001\002\000\016\006\uffd0\007\uffd0\011\uffd0" +
    "\020\uffd0\025\uffd0\027\uffd0\001\002\000\006\006\057\020" +
    "\uffe4\001\002\000\004\020\051\001\002\000\016\006\uffcf" +
    "\007\uffcf\011\uffcf\020\uffcf\025\uffcf\027\uffcf\001\002\000" +
    "\016\006\uffd1\007\uffd1\011\uffd1\020\uffd1\025\uffd1\027\uffd1" +
    "\001\002\000\004\021\052\001\002\000\024\012\021\014" +
    "\uffef\016\uffe1\033\uffe8\037\uffdf\046\ufff7\047\ufff7\050\ufff7" +
    "\052\uffe6\001\002\000\004\035\054\001\002\000\004\052" +
    "\055\001\002\000\004\022\056\001\002\000\006\002\ufffd" +
    "\005\ufffd\001\002\000\014\013\043\020\uffe2\044\044\045" +
    "\050\052\047\001\002\000\004\020\uffe3\001\002\000\010" +
    "\022\ufff0\035\ufff0\041\ufff0\001\002\000\010\022\ufff2\035" +
    "\ufff2\041\ufff2\001\002\000\010\022\ufff1\035\ufff1\041\ufff1" +
    "\001\002\000\004\024\065\001\002\000\004\052\066\001" +
    "\002\000\004\024\067\001\002\000\004\020\070\001\002" +
    "\000\024\012\uffd9\014\uffd9\016\uffd9\033\uffd9\037\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\052\uffd9\001\002\000\010\022\ufff4" +
    "\035\ufff4\041\ufff4\001\002\000\004\046\106\001\002\000" +
    "\004\052\103\001\002\000\024\012\021\014\uffef\016\uffe1" +
    "\033\uffe8\037\uffdf\046\ufff7\047\ufff7\050\ufff7\052\uffe6\001" +
    "\002\000\004\052\076\001\002\000\004\051\077\001\002" +
    "\000\006\044\100\045\101\001\002\000\024\012\uffea\014" +
    "\uffea\016\uffea\033\uffea\037\uffea\046\uffea\047\uffea\050\uffea" +
    "\052\uffea\001\002\000\024\012\uffeb\014\uffeb\016\uffeb\033" +
    "\uffeb\037\uffeb\046\uffeb\047\uffeb\050\uffeb\052\uffeb\001\002" +
    "\000\010\022\ufff6\035\ufff6\041\ufff6\001\002\000\004\051" +
    "\104\001\002\000\004\043\105\001\002\000\024\012\uffe9" +
    "\014\uffe9\016\uffe9\033\uffe9\037\uffe9\046\uffe9\047\uffe9\050" +
    "\uffe9\052\uffe9\001\002\000\004\052\107\001\002\000\004" +
    "\051\110\001\002\000\004\013\111\001\002\000\024\012" +
    "\uffec\014\uffec\016\uffec\033\uffec\037\uffec\046\uffec\047\uffec" +
    "\050\uffec\052\uffec\001\002\000\004\017\113\001\002\000" +
    "\012\013\043\044\044\045\050\052\047\001\002\000\010" +
    "\011\127\020\uffd6\025\130\001\002\000\004\020\123\001" +
    "\002\000\006\007\120\027\121\001\002\000\012\013\043" +
    "\044\044\045\050\052\047\001\002\000\012\013\uffd3\044" +
    "\uffd3\045\uffd3\052\uffd3\001\002\000\012\013\uffd4\044\uffd4" +
    "\045\uffd4\052\uffd4\001\002\000\010\011\uffd5\020\uffd5\025" +
    "\uffd5\001\002\000\004\021\124\001\002\000\024\012\021" +
    "\014\uffef\016\uffe1\033\uffe8\037\uffdf\046\ufff7\047\ufff7\050" +
    "\ufff7\052\uffe6\001\002\000\004\022\126\001\002\000\024" +
    "\012\uffee\014\uffee\016\uffee\033\uffee\037\uffee\046\uffee\047" +
    "\uffee\050\uffee\052\uffee\001\002\000\012\013\043\044\044" +
    "\045\050\052\047\001\002\000\012\013\043\044\044\045" +
    "\050\052\047\001\002\000\004\020\uffd8\001\002\000\004" +
    "\020\uffd7\001\002\000\004\017\134\001\002\000\004\013" +
    "\135\001\002\000\004\036\136\001\002\000\004\013\137" +
    "\001\002\000\004\020\140\001\002\000\004\021\141\001" +
    "\002\000\024\012\021\014\uffef\016\uffe1\033\uffe8\037\uffdf" +
    "\046\ufff7\047\ufff7\050\ufff7\052\uffe6\001\002\000\004\022" +
    "\143\001\002\000\024\012\uffe7\014\uffe7\016\uffe7\033\uffe7" +
    "\037\uffe7\046\uffe7\047\uffe7\050\uffe7\052\uffe7\001\002\000" +
    "\010\022\ufff5\035\ufff5\041\ufff5\001\002\000\004\017\146" +
    "\001\002\000\014\013\043\020\uffe2\044\044\045\050\052" +
    "\047\001\002\000\004\020\150\001\002\000\024\012\uffe5" +
    "\014\uffe5\016\uffe5\033\uffe5\037\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\052\uffe5\001\002\000\004\017\152\001\002\000\012" +
    "\013\043\044\044\045\050\052\047\001\002\000\004\020" +
    "\154\001\002\000\004\021\155\001\002\000\024\012\021" +
    "\014\uffef\016\uffe1\033\uffe8\037\uffdf\046\ufff7\047\ufff7\050" +
    "\ufff7\052\uffe6\001\002\000\004\022\157\001\002\000\024" +
    "\012\uffe0\014\uffe0\016\uffe0\033\uffe0\037\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\052\uffe0\001\002\000\010\022\ufff3\035\ufff3" +
    "\041\ufff3\001\002\000\004\017\162\001\002\000\004\052" +
    "\163\001\002\000\004\020\164\001\002\000\004\021\165" +
    "\001\002\000\004\040\166\001\002\000\014\015\035\034" +
    "\034\046\036\047\033\050\037\001\002\000\004\022\170" +
    "\001\002\000\024\012\uffde\014\uffde\016\uffde\033\uffde\037" +
    "\uffde\046\uffde\047\uffde\050\uffde\052\uffde\001\002\000\004" +
    "\036\172\001\002\000\024\012\021\014\uffef\016\uffe1\033" +
    "\uffe8\037\uffdf\046\ufff7\047\ufff7\050\ufff7\052\uffe6\001\002" +
    "\000\004\041\174\001\002\000\010\022\uffda\040\166\042" +
    "\177\001\002\000\004\022\uffdc\001\002\000\004\022\uffdd" +
    "\001\002\000\004\036\200\001\002\000\024\012\021\014" +
    "\uffef\016\uffe1\033\uffe8\037\uffdf\046\ufff7\047\ufff7\050\ufff7" +
    "\052\uffe6\001\002\000\004\022\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\023\004\010" +
    "\014\024\015\022\016\017\017\013\020\021\027\016\030" +
    "\015\032\014\033\012\034\011\035\007\001\001\000\002" +
    "\001\001\000\034\003\023\004\010\014\157\015\022\016" +
    "\017\017\013\020\021\027\016\030\015\032\014\033\012" +
    "\034\011\035\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\023\004\010\014\143\015\022\016\017" +
    "\017\013\020\021\027\016\030\015\032\014\033\012\034" +
    "\011\035\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\073\031\071\001\001\000\034\003\023\004" +
    "\010\014\070\015\022\016\017\017\013\020\021\027\016" +
    "\030\015\032\014\033\012\034\011\035\007\001\001\000" +
    "\002\001\001\000\034\003\023\004\010\014\062\015\022" +
    "\016\017\017\013\020\021\027\016\030\015\032\014\033" +
    "\012\034\011\035\007\001\001\000\034\003\023\004\010" +
    "\014\061\015\022\016\017\017\013\020\021\027\016\030" +
    "\015\032\014\033\012\034\011\035\007\001\001\000\034" +
    "\003\023\004\010\014\060\015\022\016\017\017\013\020" +
    "\021\027\016\030\015\032\014\033\012\034\011\035\007" +
    "\001\001\000\002\001\001\000\006\006\030\010\027\001" +
    "\001\000\004\012\037\001\001\000\006\006\031\010\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\044\023\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\023" +
    "\004\010\014\052\015\022\016\017\017\013\020\021\027" +
    "\016\030\015\032\014\033\012\034\011\035\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\044\023\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\023\004\010" +
    "\014\101\015\022\016\017\017\013\020\021\027\016\030" +
    "\015\032\014\033\012\034\011\035\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\115\021\114\022\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\116\001\001" +
    "\000\004\013\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\023" +
    "\004\010\014\124\015\022\016\017\017\013\020\021\027" +
    "\016\030\015\032\014\033\012\034\011\035\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\115\021" +
    "\131\022\113\001\001\000\010\013\115\021\130\022\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\023\004" +
    "\010\014\141\015\022\016\017\017\013\020\021\027\016" +
    "\030\015\032\014\033\012\034\011\035\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\044\023\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\115" +
    "\021\152\022\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\023\004\010\014\155\015\022\016\017" +
    "\017\013\020\021\027\016\030\015\032\014\033\012\034" +
    "\011\035\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\166\001\001" +
    "\000\004\012\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\023\004\010\014\172" +
    "\015\022\016\017\017\013\020\021\027\016\030\015\032" +
    "\014\033\012\034\011\035\007\001\001\000\002\001\001" +
    "\000\006\005\174\007\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\023\004\010" +
    "\014\200\015\022\016\017\017\013\020\021\027\016\030" +
    "\015\032\014\033\012\034\011\035\007\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALOR ::= TKN_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALOR ::= TKN_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALOR ::= TKN_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VALOR ::= TKN_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPCONDICION ::= TKN_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPCONDICION ::= TKN_OPREL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDICION ::= CONDICIONP TKN_OR CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONDICION ::= CONDICIONP TKN_AND CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IMPRIMIR ::= TKN_IMPRIMIR TKN_PARENTESISI TKN_COMILLA TKN_ID TKN_COMILLA TKN_PARENTESISD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CASOS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CASOS ::= TKN_DEFAULT TKN_DOSPUNTOS STATEMENTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CASOS ::= CASOSA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CASOSA ::= TKN_CASE TIPO TKN_DOSPUNTOS STATEMENTS TKN_ENDCASE CASOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOSA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SWITCH ::= NT$6 TKN_SWITCH TKN_PARENTESISI TKN_ID TKN_PARENTESISD TKN_LLAVEIZ CASOSA TKN_LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$6 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE SWITCH");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // WHILE ::= NT$5 TKN_WHILE TKN_PARENTESISI CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE WHILE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA_ARGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_ARGS ::= VALOR TKN_COMA LISTA_ARGS 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA_ARGS ::= VALOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LLAMADO ::= NT$4 TKN_ID TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE LLAMADO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FOR ::= NT$3 TKN_FOR TKN_PARENTESISI TKN_DIGITO TKN_DOSPUNTOS TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE FOR");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= TKN_CHAR TKN_ID TKN_ASIGNACCION TKN_LETRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= TKN_BOOLEAN TKN_ID TKN_ASIGNACCION TKN_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= TKN_BOOLEAN TKN_ID TKN_ASIGNACCION TKN_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= NT$2 TKN_INT TKN_ID TKN_ASIGNACCION TKN_DIGITO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$2 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE DECLARACION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IF ::= NT$1 TKN_IF TKN_PARENTESISI CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$1 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE IF");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENTS ::= IMPRIMIR STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENTS ::= SWITCH STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENTS ::= LLAMADO STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENTS ::= WHILE STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENTS ::= IF STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENTS ::= FOR STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENTS ::= NT$0 DECLARACION STATEMENTS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE statements");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= TKN_VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= TKN_DIGITOFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO ::= TKN_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO ::= TKN_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPO ::= TKN_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION ::= TKN_FUNCION TIPO TKN_ID TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= TKN_MAIN TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

