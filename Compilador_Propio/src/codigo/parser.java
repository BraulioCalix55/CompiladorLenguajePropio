
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 28 21:26:38 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 28 21:26:38 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\003\007\000\002\003" +
    "\007\000\002\003\007\000\002\012\004\000\002\012\002" +
    "\000\002\016\015\000\002\016\015\000\002\016\015\000" +
    "\002\016\015\000\002\022\006\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\002\000\002" +
    "\015\011\000\002\015\011\000\002\015\011\000\002\015" +
    "\011\000\002\015\011\000\002\023\006\000\002\023\006" +
    "\000\002\023\006\000\002\023\006\000\002\023\006\000" +
    "\002\023\006\000\002\023\006\000\002\023\006\000\002" +
    "\023\006\000\002\023\006\000\002\023\006\000\002\023" +
    "\006\000\002\023\006\000\002\023\006\000\002\023\006" +
    "\000\002\023\006\000\002\023\006\000\002\023\006\000" +
    "\002\014\013\000\002\014\013\000\002\014\013\000\002" +
    "\014\013\000\002\004\003\000\002\004\005\000\002\005" +
    "\011\000\002\013\011\000\002\013\007\000\002\013\007" +
    "\000\002\013\007\000\002\013\007\000\002\013\007\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\010\010\000\002\010\010\000\002\010\010\000\002\010" +
    "\010\000\002\011\003\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\021\010\000\002\021\010\000" +
    "\002\021\010\000\002\021\010\000\002\021\010\000\002" +
    "\021\010\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\025\005\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\024\003\000\002" +
    "\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\006\003\004\011\005\001\002\000\004\021" +
    "\u0116\001\002\000\006\003\010\021\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\032\003" +
    "\026\012\015\014\033\016\014\022\uffe9\026\024\030\030" +
    "\034\025\043\013\044\031\045\034\047\012\001\002\000" +
    "\032\003\026\012\015\014\033\016\014\022\uffe9\026\024" +
    "\030\030\034\025\043\013\044\031\045\034\047\012\001" +
    "\002\000\004\017\377\001\002\000\004\047\371\001\002" +
    "\000\004\017\363\001\002\000\006\003\337\017\340\001" +
    "\002\000\036\003\026\012\015\014\033\016\014\022\uffe9" +
    "\026\024\030\030\032\uffe9\034\025\036\uffe9\043\013\044" +
    "\031\045\034\047\012\001\002\000\036\003\026\012\015" +
    "\014\033\016\014\022\uffe9\026\024\030\030\032\uffe9\034" +
    "\025\036\uffe9\043\013\044\031\045\034\047\012\001\002" +
    "\000\036\003\026\012\015\014\033\016\014\022\uffe9\026" +
    "\024\030\030\032\uffe9\034\025\036\uffe9\043\013\044\031" +
    "\045\034\047\012\001\002\000\036\003\026\012\015\014" +
    "\033\016\014\022\uffe9\026\024\030\030\032\uffe9\034\025" +
    "\036\uffe9\043\013\044\031\045\034\047\012\001\002\000" +
    "\036\003\026\012\015\014\033\016\014\022\uffe9\026\024" +
    "\030\030\032\uffe9\034\025\036\uffe9\043\013\044\031\045" +
    "\034\047\012\001\002\000\004\022\246\001\002\000\004" +
    "\047\240\001\002\000\006\003\162\017\163\001\002\000" +
    "\006\017\145\047\146\001\002\000\036\003\026\012\015" +
    "\014\033\016\014\022\uffe9\026\024\030\030\032\uffe9\034" +
    "\025\036\uffe9\043\013\044\031\045\034\047\012\001\002" +
    "\000\004\017\117\001\002\000\006\003\106\047\107\001" +
    "\002\000\036\003\026\012\015\014\033\016\014\022\uffe9" +
    "\026\024\030\030\032\uffe9\034\025\036\uffe9\043\013\044" +
    "\031\045\034\047\012\001\002\000\006\003\044\017\045" +
    "\001\002\000\004\047\035\001\002\000\006\003\036\046" +
    "\037\001\002\000\004\042\043\001\002\000\010\003\041" +
    "\041\040\042\042\001\002\000\036\003\uffdb\012\uffdb\014" +
    "\uffdb\016\uffdb\022\uffdb\026\uffdb\030\uffdb\032\uffdb\034\uffdb" +
    "\036\uffdb\043\uffdb\044\uffdb\045\uffdb\047\uffdb\001\002\000" +
    "\036\003\uffdc\012\uffdc\014\uffdc\016\uffdc\022\uffdc\026\uffdc" +
    "\030\uffdc\032\uffdc\034\uffdc\036\uffdc\043\uffdc\044\uffdc\045" +
    "\uffdc\047\uffdc\001\002\000\036\003\uffdf\012\uffdf\014\uffdf" +
    "\016\uffdf\022\uffdf\026\uffdf\030\uffdf\032\uffdf\034\uffdf\036" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf\001\002\000\036" +
    "\003\uffdd\012\uffdd\014\uffdd\016\uffdd\022\uffdd\026\uffdd\030" +
    "\uffdd\032\uffdd\034\uffdd\036\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\047\uffdd\001\002\000\012\013\047\041\051\042\054\047" +
    "\053\001\002\000\012\013\047\041\051\042\054\047\053" +
    "\001\002\000\012\003\uffaa\020\uffaa\024\075\025\074\001" +
    "\002\000\020\003\uffb0\007\uffb0\010\uffb0\020\uffb0\024\uffb0" +
    "\025\uffb0\027\uffb0\001\002\000\006\003\061\020\062\001" +
    "\002\000\020\003\uffae\007\uffae\010\uffae\020\uffae\024\uffae" +
    "\025\uffae\027\uffae\001\002\000\006\010\056\027\057\001" +
    "\002\000\020\003\uffad\007\uffad\010\uffad\020\uffad\024\uffad" +
    "\025\uffad\027\uffad\001\002\000\020\003\uffaf\007\uffaf\010" +
    "\uffaf\020\uffaf\024\uffaf\025\uffaf\027\uffaf\001\002\000\012" +
    "\013\047\041\051\042\054\047\053\001\002\000\012\013" +
    "\uffa7\041\uffa7\042\uffa7\047\uffa7\001\002\000\012\013\uffa8" +
    "\041\uffa8\042\uffa8\047\uffa8\001\002\000\012\003\uffa9\020" +
    "\uffa9\024\uffa9\025\uffa9\001\002\000\004\021\071\001\002" +
    "\000\006\003\063\021\064\001\002\000\032\003\026\012" +
    "\015\014\033\016\014\022\uffe9\026\024\030\030\034\025" +
    "\043\013\044\031\045\034\047\012\001\002\000\032\003" +
    "\026\012\015\014\033\016\014\022\uffe9\026\024\030\030" +
    "\034\025\043\013\044\031\045\034\047\012\001\002\000" +
    "\004\022\066\001\002\000\036\003\uffe8\012\uffe8\014\uffe8" +
    "\016\uffe8\022\uffe8\026\uffe8\030\uffe8\032\uffe8\034\uffe8\036" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\047\uffe8\001\002\000\004" +
    "\022\070\001\002\000\036\003\uffe4\012\uffe4\014\uffe4\016" +
    "\uffe4\022\uffe4\026\uffe4\030\uffe4\032\uffe4\034\uffe4\036\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\047\uffe4\001\002\000\032\003" +
    "\026\012\015\014\033\016\014\022\uffe9\026\024\030\030" +
    "\034\025\043\013\044\031\045\034\047\012\001\002\000" +
    "\004\022\073\001\002\000\036\003\uffe5\012\uffe5\014\uffe5" +
    "\016\uffe5\022\uffe5\026\uffe5\030\uffe5\032\uffe5\034\uffe5\036" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\047\uffe5\001\002\000\012" +
    "\013\047\041\051\042\054\047\053\001\002\000\012\013" +
    "\047\041\051\042\054\047\053\001\002\000\006\003\uffac" +
    "\020\uffac\001\002\000\006\003\uffab\020\uffab\001\002\000" +
    "\004\020\101\001\002\000\004\021\102\001\002\000\032" +
    "\003\026\012\015\014\033\016\014\022\uffe9\026\024\030" +
    "\030\034\025\043\013\044\031\045\034\047\012\001\002" +
    "\000\004\022\104\001\002\000\036\003\uffe6\012\uffe6\014" +
    "\uffe6\016\uffe6\022\uffe6\026\uffe6\030\uffe6\032\uffe6\034\uffe6" +
    "\036\uffe6\043\uffe6\044\uffe6\045\uffe6\047\uffe6\001\002\000" +
    "\010\022\uffef\032\uffef\036\uffef\001\002\000\004\046\115" +
    "\001\002\000\006\003\110\046\111\001\002\000\004\040" +
    "\114\001\002\000\006\003\112\040\113\001\002\000\036" +
    "\003\uffd6\012\uffd6\014\uffd6\016\uffd6\022\uffd6\026\uffd6\030" +
    "\uffd6\032\uffd6\034\uffd6\036\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\047\uffd6\001\002\000\036\003\uffda\012\uffda\014\uffda\016" +
    "\uffda\022\uffda\026\uffda\030\uffda\032\uffda\034\uffda\036\uffda" +
    "\043\uffda\044\uffda\045\uffda\047\uffda\001\002\000\036\003" +
    "\uffd7\012\uffd7\014\uffd7\016\uffd7\022\uffd7\026\uffd7\030\uffd7" +
    "\032\uffd7\034\uffd7\036\uffd7\043\uffd7\044\uffd7\045\uffd7\047" +
    "\uffd7\001\002\000\004\040\116\001\002\000\036\003\uffd8" +
    "\012\uffd8\014\uffd8\016\uffd8\022\uffd8\026\uffd8\030\uffd8\032" +
    "\uffd8\034\uffd8\036\uffd8\043\uffd8\044\uffd8\045\uffd8\047\uffd8" +
    "\001\002\000\006\003\121\013\120\001\002\000\006\003" +
    "\130\033\131\001\002\000\004\033\122\001\002\000\004" +
    "\013\123\001\002\000\004\020\124\001\002\000\004\021" +
    "\125\001\002\000\032\003\026\012\015\014\033\016\014" +
    "\022\uffe9\026\024\030\030\034\025\043\013\044\031\045" +
    "\034\047\012\001\002\000\004\022\127\001\002\000\036" +
    "\003\uffcf\012\uffcf\014\uffcf\016\uffcf\022\uffcf\026\uffcf\030" +
    "\uffcf\032\uffcf\034\uffcf\036\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\047\uffcf\001\002\000\004\013\137\001\002\000\004\013" +
    "\132\001\002\000\004\020\133\001\002\000\004\021\134" +
    "\001\002\000\032\003\026\012\015\014\033\016\014\022" +
    "\uffe9\026\024\030\030\034\025\043\013\044\031\045\034" +
    "\047\012\001\002\000\004\022\136\001\002\000\036\003" +
    "\uffd1\012\uffd1\014\uffd1\016\uffd1\022\uffd1\026\uffd1\030\uffd1" +
    "\032\uffd1\034\uffd1\036\uffd1\043\uffd1\044\uffd1\045\uffd1\047" +
    "\uffd1\001\002\000\004\020\140\001\002\000\004\021\141" +
    "\001\002\000\032\003\026\012\015\014\033\016\014\022" +
    "\uffe9\026\024\030\030\034\025\043\013\044\031\045\034" +
    "\047\012\001\002\000\004\022\143\001\002\000\036\003" +
    "\uffce\012\uffce\014\uffce\016\uffce\022\uffce\026\uffce\030\uffce" +
    "\032\uffce\034\uffce\036\uffce\043\uffce\044\uffce\045\uffce\047" +
    "\uffce\001\002\000\010\022\uffec\032\uffec\036\uffec\001\002" +
    "\000\010\013\154\040\156\047\155\001\002\000\004\046" +
    "\147\001\002\000\012\013\150\015\151\040\153\042\152" +
    "\001\002\000\036\003\uffe2\012\uffe2\014\uffe2\016\uffe2\022" +
    "\uffe2\026\uffe2\030\uffe2\032\uffe2\034\uffe2\036\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\047\uffe2\001\002\000\036\003\uffd4\012" +
    "\uffd4\014\uffd4\016\uffd4\022\uffd4\026\uffd4\030\uffd4\032\uffd4" +
    "\034\uffd4\036\uffd4\043\uffd4\044\uffd4\045\uffd4\047\uffd4\001" +
    "\002\000\036\003\uffde\012\uffde\014\uffde\016\uffde\022\uffde" +
    "\026\uffde\030\uffde\032\uffde\034\uffde\036\uffde\043\uffde\044" +
    "\uffde\045\uffde\047\uffde\001\002\000\036\003\uffd9\012\uffd9" +
    "\014\uffd9\016\uffd9\022\uffd9\026\uffd9\030\uffd9\032\uffd9\034" +
    "\uffd9\036\uffd9\043\uffd9\044\uffd9\045\uffd9\047\uffd9\001\002" +
    "\000\010\003\uffc2\020\uffc2\033\uffc2\001\002\000\010\003" +
    "\uffc4\020\uffc4\033\uffc4\001\002\000\010\003\uffc3\020\uffc3" +
    "\033\uffc3\001\002\000\004\020\160\001\002\000\004\021" +
    "\161\001\002\000\036\003\uffc9\012\uffc9\014\uffc9\016\uffc9" +
    "\022\uffc9\026\uffc9\030\uffc9\032\uffc9\034\uffc9\036\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\047\uffc9\001\002\000\010\013\154" +
    "\040\156\047\155\001\002\000\012\003\164\013\154\040" +
    "\156\047\155\001\002\000\004\020\233\001\002\000\006" +
    "\003\166\020\167\001\002\000\004\021\232\001\002\000" +
    "\006\003\170\021\171\001\002\000\036\003\uffc5\012\uffc5" +
    "\014\uffc5\016\uffc5\022\uffc5\026\uffc5\030\uffc5\032\uffc5\034" +
    "\uffc5\036\uffc5\043\uffc5\044\uffc5\045\uffc5\047\uffc5\001\002" +
    "\000\006\003\174\035\172\001\002\000\012\003\214\013" +
    "\154\040\156\047\155\001\002\000\004\022\213\001\002" +
    "\000\010\013\154\040\156\047\155\001\002\000\004\033" +
    "\176\001\002\000\032\003\026\012\015\014\033\016\014" +
    "\026\024\030\030\034\025\036\uffe9\043\013\044\031\045" +
    "\034\047\012\001\002\000\004\036\200\001\002\000\010" +
    "\003\202\035\172\037\204\001\002\000\004\022\uffbd\001" +
    "\002\000\012\013\154\033\211\040\156\047\155\001\002" +
    "\000\004\022\uffc0\001\002\000\006\003\205\033\206\001" +
    "\002\000\032\003\026\012\015\014\033\016\014\022\uffe9" +
    "\026\024\030\030\034\025\043\013\044\031\045\034\047" +
    "\012\001\002\000\032\003\026\012\015\014\033\016\014" +
    "\022\uffe9\026\024\030\030\034\025\043\013\044\031\045" +
    "\034\047\012\001\002\000\004\022\uffbc\001\002\000\004" +
    "\022\uffba\001\002\000\032\003\026\012\015\014\033\016" +
    "\014\022\uffe9\026\024\030\030\034\025\043\013\044\031" +
    "\045\034\047\012\001\002\000\004\022\uffbb\001\002\000" +
    "\036\003\uffca\012\uffca\014\uffca\016\uffca\022\uffca\026\uffca" +
    "\030\uffca\032\uffca\034\uffca\036\uffca\043\uffca\044\uffca\045" +
    "\uffca\047\uffca\001\002\000\004\033\226\001\002\000\006" +
    "\003\216\033\217\001\002\000\032\003\026\012\015\014" +
    "\033\016\014\026\024\030\030\034\025\036\uffe9\043\013" +
    "\044\031\045\034\047\012\001\002\000\032\003\026\012" +
    "\015\014\033\016\014\026\024\030\030\034\025\036\uffe9" +
    "\043\013\044\031\045\034\047\012\001\002\000\004\036" +
    "\221\001\002\000\010\003\202\035\172\037\204\001\002" +
    "\000\004\022\uffc1\001\002\000\004\036\224\001\002\000" +
    "\010\003\202\035\172\037\204\001\002\000\004\022\uffbe" +
    "\001\002\000\032\003\026\012\015\014\033\016\014\026" +
    "\024\030\030\034\025\036\uffe9\043\013\044\031\045\034" +
    "\047\012\001\002\000\004\036\230\001\002\000\010\003" +
    "\202\035\172\037\204\001\002\000\004\022\uffbf\001\002" +
    "\000\036\003\uffc6\012\uffc6\014\uffc6\016\uffc6\022\uffc6\026" +
    "\uffc6\030\uffc6\032\uffc6\034\uffc6\036\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\047\uffc6\001\002\000\004\021\234\001\002\000" +
    "\036\003\uffc7\012\uffc7\014\uffc7\016\uffc7\022\uffc7\026\uffc7" +
    "\030\uffc7\032\uffc7\034\uffc7\036\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\047\uffc7\001\002\000\004\020\236\001\002\000\004" +
    "\021\237\001\002\000\036\003\uffc8\012\uffc8\014\uffc8\016" +
    "\uffc8\022\uffc8\026\uffc8\030\uffc8\032\uffc8\034\uffc8\036\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\047\uffc8\001\002\000\006\003" +
    "\241\046\242\001\002\000\004\015\245\001\002\000\006" +
    "\003\244\015\243\001\002\000\036\003\uffd5\012\uffd5\014" +
    "\uffd5\016\uffd5\022\uffd5\026\uffd5\030\uffd5\032\uffd5\034\uffd5" +
    "\036\uffd5\043\uffd5\044\uffd5\045\uffd5\047\uffd5\001\002\000" +
    "\036\003\uffd2\012\uffd2\014\uffd2\016\uffd2\022\uffd2\026\uffd2" +
    "\030\uffd2\032\uffd2\034\uffd2\036\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\047\uffd2\001\002\000\036\003\uffd3\012\uffd3\014\uffd3" +
    "\016\uffd3\022\uffd3\026\uffd3\030\uffd3\032\uffd3\034\uffd3\036" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\047\uffd3\001\002\000\010" +
    "\002\ufffc\003\250\006\247\001\002\000\016\003\256\026" +
    "\260\031\254\043\257\044\255\045\261\001\002\000\016" +
    "\003\256\026\260\031\254\043\257\044\255\045\261\001" +
    "\002\000\010\002\ufffc\003\250\006\247\001\002\000\004" +
    "\002\000\001\002\000\004\002\ufffd\001\002\000\006\003" +
    "\ufff6\047\ufff6\001\002\000\006\003\ufff4\047\ufff4\001\002" +
    "\000\006\003\ufff1\047\ufff1\001\002\000\006\003\ufff5\047" +
    "\ufff5\001\002\000\006\003\ufff2\047\ufff2\001\002\000\006" +
    "\003\ufff3\047\ufff3\001\002\000\004\047\263\001\002\000" +
    "\004\017\264\001\002\000\012\013\047\041\051\042\054" +
    "\047\053\001\002\000\006\007\275\020\uffcd\001\002\000" +
    "\004\020\267\001\002\000\004\021\270\001\002\000\032" +
    "\003\026\012\015\014\033\016\014\026\024\030\030\032" +
    "\uffe9\034\025\043\013\044\031\045\034\047\012\001\002" +
    "\000\004\032\272\001\002\000\004\047\273\001\002\000" +
    "\004\022\274\001\002\000\010\002\ufffa\003\ufffa\006\ufffa" +
    "\001\002\000\012\013\047\041\051\042\054\047\053\001" +
    "\002\000\004\020\uffcc\001\002\000\006\003\300\047\301" +
    "\001\002\000\004\017\322\001\002\000\006\003\302\017" +
    "\303\001\002\000\012\013\047\041\051\042\054\047\053" +
    "\001\002\000\012\013\047\041\051\042\054\047\053\001" +
    "\002\000\004\020\305\001\002\000\004\021\306\001\002" +
    "\000\032\003\026\012\015\014\033\016\014\026\024\030" +
    "\030\032\uffe9\034\025\043\013\044\031\045\034\047\012" +
    "\001\002\000\004\032\310\001\002\000\004\047\311\001" +
    "\002\000\004\022\312\001\002\000\010\002\ufffb\003\ufffb" +
    "\006\ufffb\001\002\000\004\020\314\001\002\000\004\021" +
    "\315\001\002\000\032\003\026\012\015\014\033\016\014" +
    "\026\024\030\030\032\uffe9\034\025\043\013\044\031\045" +
    "\034\047\012\001\002\000\004\032\317\001\002\000\004" +
    "\047\320\001\002\000\004\022\321\001\002\000\010\002" +
    "\ufff8\003\ufff8\006\ufff8\001\002\000\012\013\047\041\051" +
    "\042\054\047\053\001\002\000\004\020\324\001\002\000" +
    "\004\021\325\001\002\000\032\003\026\012\015\014\033" +
    "\016\014\026\024\030\030\032\uffe9\034\025\043\013\044" +
    "\031\045\034\047\012\001\002\000\004\032\327\001\002" +
    "\000\004\047\330\001\002\000\004\022\331\001\002\000" +
    "\010\002\ufff9\003\ufff9\006\ufff9\001\002\000\010\022\uffee" +
    "\032\uffee\036\uffee\001\002\000\010\022\uffeb\032\uffeb\036" +
    "\uffeb\001\002\000\010\022\uffea\032\uffea\036\uffea\001\002" +
    "\000\010\022\ufff0\032\ufff0\036\ufff0\001\002\000\010\022" +
    "\uffed\032\uffed\036\uffed\001\002\000\004\023\357\001\002" +
    "\000\006\003\341\023\342\001\002\000\010\013\343\040" +
    "\346\047\345\001\002\000\010\013\343\040\346\047\345" +
    "\001\002\000\006\003\uffb3\023\uffb3\001\002\000\006\003" +
    "\347\023\350\001\002\000\006\003\uffb2\023\uffb2\001\002" +
    "\000\006\003\uffb1\023\uffb1\001\002\000\004\020\353\001" +
    "\002\000\006\003\351\020\352\001\002\000\036\003\uffb4" +
    "\012\uffb4\014\uffb4\016\uffb4\022\uffb4\026\uffb4\030\uffb4\032" +
    "\uffb4\034\uffb4\036\uffb4\043\uffb4\044\uffb4\045\uffb4\047\uffb4" +
    "\001\002\000\036\003\uffb9\012\uffb9\014\uffb9\016\uffb9\022" +
    "\uffb9\026\uffb9\030\uffb9\032\uffb9\034\uffb9\036\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\047\uffb9\001\002\000\036\003\uffb6\012" +
    "\uffb6\014\uffb6\016\uffb6\022\uffb6\026\uffb6\030\uffb6\032\uffb6" +
    "\034\uffb6\036\uffb6\043\uffb6\044\uffb6\045\uffb6\047\uffb6\001" +
    "\002\000\004\023\355\001\002\000\004\020\356\001\002" +
    "\000\036\003\uffb7\012\uffb7\014\uffb7\016\uffb7\022\uffb7\026" +
    "\uffb7\030\uffb7\032\uffb7\034\uffb7\036\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\047\uffb7\001\002\000\010\013\343\040\346\047" +
    "\345\001\002\000\004\023\361\001\002\000\004\020\362" +
    "\001\002\000\036\003\uffb5\012\uffb5\014\uffb5\016\uffb5\022" +
    "\uffb5\026\uffb5\030\uffb5\032\uffb5\034\uffb5\036\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\047\uffb5\001\002\000\012\013\047\041" +
    "\051\042\054\047\053\001\002\000\004\020\365\001\002" +
    "\000\004\021\366\001\002\000\032\003\026\012\015\014" +
    "\033\016\014\022\uffe9\026\024\030\030\034\025\043\013" +
    "\044\031\045\034\047\012\001\002\000\004\022\370\001" +
    "\002\000\036\003\uffcb\012\uffcb\014\uffcb\016\uffcb\022\uffcb" +
    "\026\uffcb\030\uffcb\032\uffcb\034\uffcb\036\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\047\uffcb\001\002\000\006\003\372\046\373" +
    "\001\002\000\004\013\376\001\002\000\006\003\375\013" +
    "\374\001\002\000\036\003\uffe3\012\uffe3\014\uffe3\016\uffe3" +
    "\022\uffe3\026\uffe3\030\uffe3\032\uffe3\034\uffe3\036\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\047\uffe3\001\002\000\036\003\uffe0" +
    "\012\uffe0\014\uffe0\016\uffe0\022\uffe0\026\uffe0\030\uffe0\032" +
    "\uffe0\034\uffe0\036\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0" +
    "\001\002\000\036\003\uffe1\012\uffe1\014\uffe1\016\uffe1\022" +
    "\uffe1\026\uffe1\030\uffe1\032\uffe1\034\uffe1\036\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\047\uffe1\001\002\000\014\013\u0101\023" +
    "\u0103\041\051\042\054\047\053\001\002\000\012\007\275" +
    "\010\056\020\uffcd\027\057\001\002\000\014\007\uffb0\010" +
    "\uffb0\020\uffb0\027\uffb0\033\u010d\001\002\000\004\020\u010c" +
    "\001\002\000\010\013\343\040\346\047\345\001\002\000" +
    "\004\020\u0105\001\002\000\004\021\u0106\001\002\000\032" +
    "\003\026\012\015\014\033\016\014\022\uffe9\026\024\030" +
    "\030\034\025\043\013\044\031\045\034\047\012\001\002" +
    "\000\004\022\u0108\001\002\000\036\003\uffe7\012\uffe7\014" +
    "\uffe7\016\uffe7\022\uffe7\026\uffe7\030\uffe7\032\uffe7\034\uffe7" +
    "\036\uffe7\043\uffe7\044\uffe7\045\uffe7\047\uffe7\001\002\000" +
    "\004\023\u010a\001\002\000\004\020\u010b\001\002\000\036" +
    "\003\uffb8\012\uffb8\014\uffb8\016\uffb8\022\uffb8\026\uffb8\030" +
    "\uffb8\032\uffb8\034\uffb8\036\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\047\uffb8\001\002\000\036\003\ufff7\012\ufff7\014\ufff7\016" +
    "\ufff7\022\ufff7\026\ufff7\030\ufff7\032\ufff7\034\ufff7\036\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\047\ufff7\001\002\000\004\013" +
    "\u010e\001\002\000\004\020\u010f\001\002\000\004\021\u0110" +
    "\001\002\000\032\003\026\012\015\014\033\016\014\022" +
    "\uffe9\026\024\030\030\034\025\043\013\044\031\045\034" +
    "\047\012\001\002\000\004\022\u0112\001\002\000\036\003" +
    "\uffd0\012\uffd0\014\uffd0\016\uffd0\022\uffd0\026\uffd0\030\uffd0" +
    "\032\uffd0\034\uffd0\036\uffd0\043\uffd0\044\uffd0\045\uffd0\047" +
    "\uffd0\001\002\000\004\022\u0114\001\002\000\010\002\ufffc" +
    "\003\250\006\247\001\002\000\004\002\ufffe\001\002\000" +
    "\032\003\026\012\015\014\033\016\014\022\uffe9\026\024" +
    "\030\030\034\025\043\013\044\031\045\034\047\012\001" +
    "\002\000\004\022\u0118\001\002\000\010\002\ufffc\003\250" +
    "\006\247\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\004\003\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\015\007\u0112\013\020\014\031\015\021\021\017\022" +
    "\026\023\016\001\001\000\022\005\015\007\022\013\020" +
    "\014\031\015\021\021\017\022\026\023\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\005\015\007\335\013\020\014\031\015" +
    "\021\021\017\022\026\023\016\001\001\000\022\005\015" +
    "\007\334\013\020\014\031\015\021\021\017\022\026\023" +
    "\016\001\001\000\022\005\015\007\333\013\020\014\031" +
    "\015\021\021\017\022\026\023\016\001\001\000\022\005" +
    "\015\007\332\013\020\014\031\015\021\021\017\022\026" +
    "\023\016\001\001\000\022\005\015\007\331\013\020\014" +
    "\031\015\021\021\017\022\026\023\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\015\007\143\013\020\014\031\015\021" +
    "\021\017\022\026\023\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\015\007\104\013\020\014\031" +
    "\015\021\021\017\022\026\023\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\051\025\077" +
    "\026\045\001\001\000\010\020\051\025\047\026\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\015\007\066\013\020" +
    "\014\031\015\021\021\017\022\026\023\016\001\001\000" +
    "\022\005\015\007\064\013\020\014\031\015\021\021\017" +
    "\022\026\023\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\015" +
    "\007\071\013\020\014\031\015\021\021\017\022\026\023" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\051\025\076\026\045\001\001\000\010\020\051\025" +
    "\075\026\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\015\007" +
    "\102\013\020\014\031\015\021\021\017\022\026\023\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\015" +
    "\007\125\013\020\014\031\015\021\021\017\022\026\023" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\015\007\134\013\020\014\031\015\021" +
    "\021\017\022\026\023\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\015\007\141\013\020\014\031\015\021\021\017\022" +
    "\026\023\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\234\001\001\000" +
    "\004\006\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\172\001\001\000\004\006\214\001\001\000\002" +
    "\001\001\000\004\006\174\001\001\000\002\001\001\000" +
    "\022\005\015\007\176\013\020\014\031\015\021\021\017" +
    "\022\026\023\016\001\001\000\002\001\001\000\006\010" +
    "\200\011\202\001\001\000\002\001\001\000\004\006\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\015\007\207\013\020\014\031\015\021\021\017\022\026" +
    "\023\016\001\001\000\022\005\015\007\206\013\020\014" +
    "\031\015\021\021\017\022\026\023\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\015\007\211\013" +
    "\020\014\031\015\021\021\017\022\026\023\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\015\007\222\013\020\014\031" +
    "\015\021\021\017\022\026\023\016\001\001\000\022\005" +
    "\015\007\217\013\020\014\031\015\021\021\017\022\026" +
    "\023\016\001\001\000\002\001\001\000\006\010\200\011" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\200\011\224\001\001\000\002\001\001\000\022\005" +
    "\015\007\226\013\020\014\031\015\021\021\017\022\026" +
    "\023\016\001\001\000\002\001\001\000\006\010\200\011" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\251\016\250\001\001\000\004" +
    "\017\276\001\001\000\004\017\261\001\001\000\006\012" +
    "\252\016\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\265\020\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\015\007\270\013\020\014\031\015\021\021" +
    "\017\022\026\023\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\275\020\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\312\020" +
    "\264\001\001\000\006\004\303\020\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\015\007\306\013" +
    "\020\014\031\015\021\021\017\022\026\023\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\015\007\315\013\020\014\031\015\021\021\017\022" +
    "\026\023\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\322\020" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\015\007\325\013\020\014\031\015\021\021\017\022" +
    "\026\023\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\353\001\001\000\004\002\343\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\357\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\051\025\363\026\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\005\015\007\366\013\020\014\031\015" +
    "\021\021\017\022\026\023\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\u0101\020\377\025\u0103\026\045\001" +
    "\001\000\004\024\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\u0108\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\015\007\u0106\013\020\014\031" +
    "\015\021\021\017\022\026\023\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\015\007\u0110" +
    "\013\020\014\031\015\021\021\017\022\026\023\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\u0114\016\250\001\001\000\002\001\001\000" +
    "\022\005\015\007\u0116\013\020\014\031\015\021\021\017" +
    "\022\026\023\016\001\001\000\002\001\001\000\006\012" +
    "\u0118\016\250\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("En la linea: " + (s.left) + " y Columna: " +(s.right)+ " con el simbolo= "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPCONDICION ::= TKN_IGUAL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPCONDICION ::= TKN_OPREL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("CONDICIONP",parser.cont);
                parser.cont++;
                nodo.addHijo(v);
                nodo.addHijo(o);
                nodo.addHijo(v2);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICION ::= CONDICIONP 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICION ::= CONDICIONP TKN_OR CONDICION 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(o);
                RESULT=nodo;              
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICION ::= CONDICIONP TKN_AND CONDICION 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALOR ::= TKN_ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALOR ::= TKN_FALSE 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALOR ::= TKN_TRUE 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALOR ::= TKN_DIGITO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPOPRI ::= TKN_LETRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPOPRI ::= TKN_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPOPRI ::= TKN_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IMPRIMIR ::= TKN_IMPRIMIR TKN_PARENTESISI TKN_COMILLA TIPOPRI TKN_COMILLA error 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta un ')' \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IMPRIMIR ::= TKN_IMPRIMIR error TKN_COMILLA TIPOPRI TKN_COMILLA TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta un '(' \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IMPRIMIR ::= TKN_IMPRIMIR TKN_PARENTESISI TKN_COMILLA TIPOPRI error TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta una '\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IMPRIMIR ::= TKN_IMPRIMIR TKN_PARENTESISI error TIPOPRI TKN_COMILLA TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta una '\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IMPRIMIR ::= TKN_ID TKN_PARENTESISI TKN_COMILLA TIPOPRI TKN_COMILLA TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.errores.add(" Sout mal escrito\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IMPRIMIR ::= TKN_IMPRIMIR TKN_PARENTESISI TKN_COMILLA TIPOPRI TKN_COMILLA TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.gramas.add("Una Impresion Reconocida satisfactoriamente");
    Nodo nodo = new Nodo("SOUT",parser.cont);
    parser.cont++;
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CASOS ::= TKN_DEFAULT error STATEMENTS 
            {
              Nodo RESULT =null;
		parser.errores.add("falta ::");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CASOS ::= error TKN_DOSPUNTOS STATEMENTS 
            {
              Nodo RESULT =null;
		parser.errores.add("falta el Def");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CASOS ::= TKN_DEFAULT TKN_DOSPUNTOS STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo("DEFAULT",parser.cont);
        parser.cont++;
        nodo.addHijo(s);
        RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CASOS ::= CASOSA 
            {
              Nodo RESULT =null;
		int casleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo cas = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo= new Nodo("SubCaso:",parser.cont);
    parser.cont++;    
    nodo.addHijo(cas);
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CASOSA ::= TKN_CASE TIPOSW error STATEMENTS TKN_ENDCASE CASOS 
            {
              Nodo RESULT =null;
		parser.errores.add(" No se puso valor '::' para el cas \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOSA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CASOSA ::= TKN_CASE error TKN_DOSPUNTOS STATEMENTS TKN_ENDCASE CASOS 
            {
              Nodo RESULT =null;
		parser.errores.add(" No se puso valor para el cas \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOSA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASOSA ::= error TIPOSW TKN_DOSPUNTOS STATEMENTS TKN_ENDCASE CASOS 
            {
              Nodo RESULT =null;
		parser.errores.add(" No se puso Cas \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOSA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASOSA ::= TKN_CASE TIPOSW TKN_DOSPUNTOS STATEMENTS TKN_ENDCASE CASOS 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ca = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo = new Nodo("Caso:" ,parser.cont);
    parser.cont++;
    nodo.addHijo(t);
    nodo.addHijo(s);
    nodo.addHijo(ca);
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOSA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPOSW ::= TKN_DIGITO 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo = new Nodo(s.toString(),parser.cont);
    parser.cont++;
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSW",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPOSW ::= TKN_LETRA 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo = new Nodo(s.toString(),parser.cont);
    parser.cont++;
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSW",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPOSW ::= TKN_ID 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo = new Nodo(s.toString(),parser.cont);
    parser.cont++;
    RESULT=nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSW",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SWITCH ::= TKN_SWITCH TKN_PARENTESISI TIPOSW TKN_PARENTESISD error 
            {
              Nodo RESULT =null;
		parser.errores.add(" No se puso '{' en el Switch \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SWITCH ::= TKN_SWITCH TKN_PARENTESISI TIPOSW error TKN_LLAVEIZ 
            {
              Nodo RESULT =null;
		parser.errores.add(" No se puso ')'\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SWITCH ::= TKN_SWITCH TKN_PARENTESISI error TKN_PARENTESISD TKN_LLAVEIZ 
            {
              Nodo RESULT =null;
		parser.errores.add(" no ingreso un tipo valido en el switch\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SWITCH ::= TKN_SWITCH error TIPOSW TKN_PARENTESISD TKN_LLAVEIZ 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta un ( \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SWITCH ::= error TKN_PARENTESISI TIPOSW TKN_PARENTESISD TKN_LLAVEIZ 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta el enunciado switch\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SWITCH ::= TKN_SWITCH TKN_PARENTESISI TIPOSW TKN_PARENTESISD TKN_LLAVEIZ CASOSA TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int casright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo cas = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Un Bloque Switch Reconocido satisfactoriamente");
        Nodo nodo= new Nodo("SWITCH",parser.cont);
        parser.cont++;
        nodo.addHijo(s);
        nodo.addHijo(cas);
        RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WHILE ::= TKN_WHILE TKN_PARENTESISI CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Un Bloque While Reconocido satisfactoriamente");
        Nodo nodo = new Nodo("WHILE",parser.cont);
        parser.cont++;
        nodo.addHijo(C);
        nodo.addHijo(s);
        RESULT=nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTA_ARGS ::= VALOR TKN_COMA LISTA_ARGS 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo =new Nodo("ARGUMENTOS",parser.cont);
            parser.cont++;
            nodo.addHijo(v);
            nodo.addHijo(s);
            RESULT= nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTA_ARGS ::= VALOR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("ARGUMENTOS",parser.cont);
            parser.cont++;
            nodo.addHijo(v);
            RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FOR ::= TKN_FOR TKN_PARENTESISI TKN_DIGITO error TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta poner '::'en el for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR ::= TKN_FOR TKN_PARENTESISI error TKN_DOSPUNTOS TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta poner un valor de inicio en el for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR ::= TKN_ID TKN_PARENTESISI TKN_DIGITO TKN_DOSPUNTOS TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta poner FOR o se escribio mal");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FOR ::= TKN_FOR TKN_PARENTESISI TKN_DIGITO TKN_DOSPUNTOS TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object dos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int di2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int di2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object di2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.gramas.add("Un Bloque FOR Reconocido satisfactoriamente");
        Nodo nodo = new Nodo("FOR",parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(di.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(new Nodo (dos.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(new Nodo (di2.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(s);    
        RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= TKN_FLOAT TKN_ID TKN_ASIGNACCION error 
            {
              Nodo RESULT =null;
		parser.errores.add("falta un valor FLOAT para la declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= TKN_FLOAT TKN_ID error TKN_DIGITOFLOAT 
            {
              Nodo RESULT =null;
		parser.errores.add("falta '<--' de declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= error TKN_ID TKN_ASIGNACCION TKN_DIGITOFLOAT 
            {
              Nodo RESULT =null;
		parser.errores.add("falta el tipo FLOAT de declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= TKN_FLOAT TKN_ID TKN_ASIGNACCION TKN_DIGITOFLOAT 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= TKN_CHAR TKN_ID TKN_ASIGNACCION error 
            {
              Nodo RESULT =null;
		parser.errores.add("no se puso un valor al char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= TKN_CHAR TKN_ID error TKN_LETRA 
            {
              Nodo RESULT =null;
		parser.errores.add("no se puso '<--'");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= TKN_CHAR error TKN_ASIGNACCION TKN_LETRA 
            {
              Nodo RESULT =null;
		parser.errores.add("no se puso el id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= error TKN_ID TKN_ASIGNACCION TKN_LETRA 
            {
              Nodo RESULT =null;
		parser.errores.add("no se puso el tipo char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= TKN_CHAR TKN_ID TKN_ASIGNACCION TKN_LETRA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= TKN_BOOLEAN TKN_ID TKN_ASIGNACCION TKN_FALSE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= TKN_BOOLEAN TKN_ID TKN_ASIGNACCION error 
            {
              Nodo RESULT =null;
		parser.errores.add("falta un valor TRUE para la declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= TKN_BOOLEAN TKN_ID error TKN_TRUE 
            {
              Nodo RESULT =null;
		parser.errores.add("falta '<--' de declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= error TKN_ID TKN_ASIGNACCION TKN_TRUE 
            {
              Nodo RESULT =null;
		parser.errores.add("falta el tipo BOOLEAN de declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= TKN_BOOLEAN TKN_ID TKN_ASIGNACCION TKN_TRUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= TKN_INT TKN_ID TKN_ASIGNACCION error 
            {
              Nodo RESULT =null;
		parser.errores.add("falta un valor para la declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= TKN_INT TKN_ID error TKN_DIGITO 
            {
              Nodo RESULT =null;
		parser.errores.add("falta '<--' de declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= error TKN_ID TKN_ASIGNACCION TKN_DIGITO 
            {
              Nodo RESULT =null;
		parser.errores.add("falta el tipo Int de declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= TKN_INT TKN_ID TKN_ASIGNACCION TKN_DIGITO 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
    Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= TKN_IF TKN_PARENTESISI CONDICION TKN_PARENTESISD error STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add("Falta poner '{' ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IF ::= TKN_IF TKN_PARENTESISI CONDICION error TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add("Falta poner ')' ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IF ::= TKN_IF error CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add("Falta poner '(' ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF ::= TKN_ID TKN_PARENTESISI CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add("Falta poner 'IF' o se escribio mal ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IF ::= TKN_IF TKN_PARENTESISI CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		int di2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int di2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo di2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.gramas.add("Un Bloque IF Reconocido satisfactoriamente");
    Nodo nodo= new Nodo("IF",parser.cont);
    parser.cont++;
    nodo.addHijo(di2);
    nodo.addHijo(s);
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENTS ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("VACIO",parser.cont++));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENTS ::= IMPRIMIR STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENTS ::= SWITCH STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTS ::= LLAMADO STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENTS ::= WHILE STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENTS ::= IF STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENTS ::= FOR STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENTS ::= DECLARACION STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= error 
            {
              Nodo RESULT =null;
		parser.errores.add("No se puso un tipo valido de funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= TKN_FLOAT 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= TKN_BOOLEAN 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= TKN_CHAR 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO ::= TKN_INT 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= TKN_VOID 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LLAMADO ::= TKN_ID TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo li = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.gramas.add("Un Llamado de Funcion Reconocido satisfactoriamente");
                Nodo nodo = new Nodo("LLAMADO",parser.cont);
                parser.cont++;                
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(li);
                RESULT=nodo;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= TKN_FUNCION TIPO TKN_ID error LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add("No se puso un '(' en funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION ::= TKN_FUNCION TIPO error TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add("No se puso un ID valido de funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= error TIPO TKN_ID TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add("Falta poner 'Fun' ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION ::= TKN_FUNCION TIPO TKN_ID TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo lis = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.gramas.add("Una Funcion Reconocida satisfactoriamente");    
                Nodo nodo = new Nodo(id.toString(),parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(lis);
                
                nodo.addHijo(b);//statements
         
                RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("FUNCION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);   
                nodo.addHijo(i);
                //System.out.println("nodo i");
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= TKN_MAIN error STATEMENTS TKN_LLAVEDER FUNCIONES 
            {
              Nodo RESULT =null;
		parser.errores.add("\nfalta '{' en el main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER FUNCIONES 
            {
              Nodo RESULT =null;
		parser.errores.add("\nFalta el Main o esta mal escrito");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= TKN_MAIN TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER FUNCIONES 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.gramas.add("Bloque Main Reconocido satisfactoriamente");
        //System.out.println(id);
        Nodo nodo = new Nodo(id.toString(),parser.cont);
        parser.cont++;
        nodo.addHijo(b);
        //System.out.println("nodo b");
        nodo.addHijo(d); 
        //System.out.println("nodo d");       
        parser.raiz=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

