
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 28 16:18:34 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 28 16:18:34 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\003\007\000\002\012" +
    "\004\000\002\012\002\000\002\016\015\000\002\016\015" +
    "\000\002\016\015\000\002\016\015\000\002\022\006\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\002\000\002\015\011\000\002\015\011\000\002" +
    "\015\011\000\002\023\006\000\002\023\006\000\002\023" +
    "\006\000\002\023\006\000\002\023\006\000\002\014\013" +
    "\000\002\014\013\000\002\014\013\000\002\014\013\000" +
    "\002\004\003\000\002\004\005\000\002\005\011\000\002" +
    "\013\011\000\002\013\007\000\002\013\007\000\002\013" +
    "\007\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\010\010\000\002\011\003\000\002\011\005\000" +
    "\002\021\010\000\002\021\010\000\002\021\010\000\002" +
    "\021\010\000\002\021\010\000\002\021\010\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\025\005\000\002\025\005\000\002\025\003\000\002" +
    "\026\005\000\002\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\004\007\004\001\002\000\004\017\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\032\003\024\010\013\012\031\014\012\020\uffeb\025" +
    "\022\030\026\034\023\043\011\044\027\045\032\047\010" +
    "\001\002\000\004\015\333\001\002\000\004\047\330\001" +
    "\002\000\004\015\322\001\002\000\006\003\301\015\302" +
    "\001\002\000\036\003\024\010\013\012\031\014\012\020" +
    "\uffeb\025\022\030\026\032\uffeb\034\023\036\uffeb\043\011" +
    "\044\027\045\032\047\010\001\002\000\036\003\024\010" +
    "\013\012\031\014\012\020\uffeb\025\022\030\026\032\uffeb" +
    "\034\023\036\uffeb\043\011\044\027\045\032\047\010\001" +
    "\002\000\036\003\024\010\013\012\031\014\012\020\uffeb" +
    "\025\022\030\026\032\uffeb\034\023\036\uffeb\043\011\044" +
    "\027\045\032\047\010\001\002\000\036\003\024\010\013" +
    "\012\031\014\012\020\uffeb\025\022\030\026\032\uffeb\034" +
    "\023\036\uffeb\043\011\044\027\045\032\047\010\001\002" +
    "\000\036\003\024\010\013\012\031\014\012\020\uffeb\025" +
    "\022\030\026\032\uffeb\034\023\036\uffeb\043\011\044\027" +
    "\045\032\047\010\001\002\000\004\020\210\001\002\000" +
    "\004\047\205\001\002\000\006\003\154\015\155\001\002" +
    "\000\004\015\123\001\002\000\036\003\024\010\013\012" +
    "\031\014\012\020\uffeb\025\022\030\026\032\uffeb\034\023" +
    "\036\uffeb\043\011\044\027\045\032\047\010\001\002\000" +
    "\004\015\075\001\002\000\004\047\072\001\002\000\036" +
    "\003\024\010\013\012\031\014\012\020\uffeb\025\022\030" +
    "\026\032\uffeb\034\023\036\uffeb\043\011\044\027\045\032" +
    "\047\010\001\002\000\006\003\037\015\040\001\002\000" +
    "\004\047\033\001\002\000\004\046\034\001\002\000\006" +
    "\041\035\042\036\001\002\000\036\003\uffe5\010\uffe5\012" +
    "\uffe5\014\uffe5\020\uffe5\025\uffe5\030\uffe5\032\uffe5\034\uffe5" +
    "\036\uffe5\043\uffe5\044\uffe5\045\uffe5\047\uffe5\001\002\000" +
    "\036\003\uffe6\010\uffe6\012\uffe6\014\uffe6\020\uffe6\025\uffe6" +
    "\030\uffe6\032\uffe6\034\uffe6\036\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\047\uffe6\001\002\000\012\011\042\041\044\042\046" +
    "\047\047\001\002\000\012\011\042\041\044\042\046\047" +
    "\047\001\002\000\010\016\uffc2\023\061\024\060\001\002" +
    "\000\016\005\uffc8\006\uffc8\016\uffc8\023\uffc8\024\uffc8\026" +
    "\uffc8\001\002\000\004\016\054\001\002\000\016\005\uffc6" +
    "\006\uffc6\016\uffc6\023\uffc6\024\uffc6\026\uffc6\001\002\000" +
    "\006\006\050\026\052\001\002\000\016\005\uffc7\006\uffc7" +
    "\016\uffc7\023\uffc7\024\uffc7\026\uffc7\001\002\000\016\005" +
    "\uffc5\006\uffc5\016\uffc5\023\uffc5\024\uffc5\026\uffc5\001\002" +
    "\000\012\011\uffbf\041\uffbf\042\uffbf\047\uffbf\001\002\000" +
    "\012\011\042\041\044\042\046\047\047\001\002\000\012" +
    "\011\uffc0\041\uffc0\042\uffc0\047\uffc0\001\002\000\010\016" +
    "\uffc1\023\uffc1\024\uffc1\001\002\000\004\017\055\001\002" +
    "\000\032\003\024\010\013\012\031\014\012\020\uffeb\025" +
    "\022\030\026\034\023\043\011\044\027\045\032\047\010" +
    "\001\002\000\004\020\057\001\002\000\036\003\uffea\010" +
    "\uffea\012\uffea\014\uffea\020\uffea\025\uffea\030\uffea\032\uffea" +
    "\034\uffea\036\uffea\043\uffea\044\uffea\045\uffea\047\uffea\001" +
    "\002\000\012\011\042\041\044\042\046\047\047\001\002" +
    "\000\012\011\042\041\044\042\046\047\047\001\002\000" +
    "\004\016\uffc4\001\002\000\004\016\uffc3\001\002\000\004" +
    "\016\065\001\002\000\004\017\066\001\002\000\032\003" +
    "\024\010\013\012\031\014\012\020\uffeb\025\022\030\026" +
    "\034\023\043\011\044\027\045\032\047\010\001\002\000" +
    "\004\020\070\001\002\000\036\003\uffe8\010\uffe8\012\uffe8" +
    "\014\uffe8\020\uffe8\025\uffe8\030\uffe8\032\uffe8\034\uffe8\036" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\047\uffe8\001\002\000\010" +
    "\020\ufff1\032\ufff1\036\ufff1\001\002\000\004\046\073\001" +
    "\002\000\004\040\074\001\002\000\036\003\uffe4\010\uffe4" +
    "\012\uffe4\014\uffe4\020\uffe4\025\uffe4\030\uffe4\032\uffe4\034" +
    "\uffe4\036\uffe4\043\uffe4\044\uffe4\045\uffe4\047\uffe4\001\002" +
    "\000\006\003\077\011\076\001\002\000\006\003\106\033" +
    "\107\001\002\000\004\033\100\001\002\000\004\011\101" +
    "\001\002\000\004\016\102\001\002\000\004\017\103\001" +
    "\002\000\032\003\024\010\013\012\031\014\012\020\uffeb" +
    "\025\022\030\026\034\023\043\011\044\027\045\032\047" +
    "\010\001\002\000\004\020\105\001\002\000\036\003\uffe0" +
    "\010\uffe0\012\uffe0\014\uffe0\020\uffe0\025\uffe0\030\uffe0\032" +
    "\uffe0\034\uffe0\036\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0" +
    "\001\002\000\004\011\115\001\002\000\004\011\110\001" +
    "\002\000\004\016\111\001\002\000\004\017\112\001\002" +
    "\000\032\003\024\010\013\012\031\014\012\020\uffeb\025" +
    "\022\030\026\034\023\043\011\044\027\045\032\047\010" +
    "\001\002\000\004\020\114\001\002\000\036\003\uffe2\010" +
    "\uffe2\012\uffe2\014\uffe2\020\uffe2\025\uffe2\030\uffe2\032\uffe2" +
    "\034\uffe2\036\uffe2\043\uffe2\044\uffe2\045\uffe2\047\uffe2\001" +
    "\002\000\004\016\116\001\002\000\004\017\117\001\002" +
    "\000\032\003\024\010\013\012\031\014\012\020\uffeb\025" +
    "\022\030\026\034\023\043\011\044\027\045\032\047\010" +
    "\001\002\000\004\020\121\001\002\000\036\003\uffdf\010" +
    "\uffdf\012\uffdf\014\uffdf\020\uffdf\025\uffdf\030\uffdf\032\uffdf" +
    "\034\uffdf\036\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf\001" +
    "\002\000\010\020\uffee\032\uffee\036\uffee\001\002\000\016" +
    "\011\127\021\130\040\126\041\044\042\046\047\125\001" +
    "\002\000\004\016\152\001\002\000\010\006\uffc5\016\uffd7" +
    "\026\uffc5\001\002\000\006\016\uffd6\033\uffd6\001\002\000" +
    "\012\006\uffc8\016\uffd5\026\uffc8\033\144\001\002\000\010" +
    "\011\136\040\141\047\140\001\002\000\004\016\132\001" +
    "\002\000\004\017\133\001\002\000\032\003\024\010\013" +
    "\012\031\014\012\020\uffeb\025\022\030\026\034\023\043" +
    "\011\044\027\045\032\047\010\001\002\000\004\020\135" +
    "\001\002\000\036\003\uffe9\010\uffe9\012\uffe9\014\uffe9\020" +
    "\uffe9\025\uffe9\030\uffe9\032\uffe9\034\uffe9\036\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\047\uffe9\001\002\000\006\003\uffcb\021" +
    "\uffcb\001\002\000\004\021\142\001\002\000\006\003\uffca" +
    "\021\uffca\001\002\000\006\003\uffc9\021\uffc9\001\002\000" +
    "\004\016\143\001\002\000\036\003\uffd0\010\uffd0\012\uffd0" +
    "\014\uffd0\020\uffd0\025\uffd0\030\uffd0\032\uffd0\034\uffd0\036" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\001\002\000\004" +
    "\011\145\001\002\000\004\016\146\001\002\000\004\017" +
    "\147\001\002\000\032\003\024\010\013\012\031\014\012" +
    "\020\uffeb\025\022\030\026\034\023\043\011\044\027\045" +
    "\032\047\010\001\002\000\004\020\151\001\002\000\036" +
    "\003\uffe1\010\uffe1\012\uffe1\014\uffe1\020\uffe1\025\uffe1\030" +
    "\uffe1\032\uffe1\034\uffe1\036\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\047\uffe1\001\002\000\004\017\153\001\002\000\036\003" +
    "\uffda\010\uffda\012\uffda\014\uffda\020\uffda\025\uffda\030\uffda" +
    "\032\uffda\034\uffda\036\uffda\043\uffda\044\uffda\045\uffda\047" +
    "\uffda\001\002\000\010\011\156\040\126\047\160\001\002" +
    "\000\012\003\157\011\156\040\126\047\160\001\002\000" +
    "\006\016\uffd5\033\uffd5\001\002\000\004\016\200\001\002" +
    "\000\006\016\uffd7\033\uffd7\001\002\000\004\016\162\001" +
    "\002\000\004\017\163\001\002\000\004\035\165\001\002" +
    "\000\004\020\177\001\002\000\010\011\156\040\126\047" +
    "\160\001\002\000\004\033\167\001\002\000\032\003\024" +
    "\010\013\012\031\014\012\025\022\030\026\034\023\036" +
    "\uffeb\043\011\044\027\045\032\047\010\001\002\000\004" +
    "\036\171\001\002\000\006\035\165\037\174\001\002\000" +
    "\004\020\uffd3\001\002\000\004\020\uffd4\001\002\000\004" +
    "\033\175\001\002\000\032\003\024\010\013\012\031\014" +
    "\012\020\uffeb\025\022\030\026\034\023\043\011\044\027" +
    "\045\032\047\010\001\002\000\004\020\uffd2\001\002\000" +
    "\036\003\uffdb\010\uffdb\012\uffdb\014\uffdb\020\uffdb\025\uffdb" +
    "\030\uffdb\032\uffdb\034\uffdb\036\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\047\uffdb\001\002\000\004\017\201\001\002\000\036" +
    "\003\uffd8\010\uffd8\012\uffd8\014\uffd8\020\uffd8\025\uffd8\030" +
    "\uffd8\032\uffd8\034\uffd8\036\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\047\uffd8\001\002\000\004\016\203\001\002\000\004\017" +
    "\204\001\002\000\036\003\uffd9\010\uffd9\012\uffd9\014\uffd9" +
    "\020\uffd9\025\uffd9\030\uffd9\032\uffd9\034\uffd9\036\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\047\uffd9\001\002\000\004\046\206" +
    "\001\002\000\004\013\207\001\002\000\036\003\uffe3\010" +
    "\uffe3\012\uffe3\014\uffe3\020\uffe3\025\uffe3\030\uffe3\032\uffe3" +
    "\034\uffe3\036\uffe3\043\uffe3\044\uffe3\045\uffe3\047\uffe3\001" +
    "\002\000\010\002\ufffe\003\212\004\211\001\002\000\016" +
    "\003\220\025\222\031\217\043\221\044\216\045\223\001" +
    "\002\000\016\003\220\025\222\031\217\043\221\044\216" +
    "\045\223\001\002\000\010\002\ufffe\003\212\004\211\001" +
    "\002\000\004\002\000\001\002\000\004\002\uffff\001\002" +
    "\000\006\003\ufff6\047\ufff6\001\002\000\006\003\ufff8\047" +
    "\ufff8\001\002\000\006\003\ufff3\047\ufff3\001\002\000\006" +
    "\003\ufff7\047\ufff7\001\002\000\006\003\ufff4\047\ufff4\001" +
    "\002\000\006\003\ufff5\047\ufff5\001\002\000\004\047\225" +
    "\001\002\000\004\015\226\001\002\000\012\011\042\041" +
    "\044\042\046\047\047\001\002\000\006\005\237\016\uffde" +
    "\001\002\000\004\016\231\001\002\000\004\017\232\001" +
    "\002\000\032\003\024\010\013\012\031\014\012\025\022" +
    "\030\026\032\uffeb\034\023\043\011\044\027\045\032\047" +
    "\010\001\002\000\004\032\234\001\002\000\004\047\235" +
    "\001\002\000\004\020\236\001\002\000\010\002\ufffc\003" +
    "\ufffc\004\ufffc\001\002\000\012\011\042\041\044\042\046" +
    "\047\047\001\002\000\004\016\uffdd\001\002\000\006\003" +
    "\242\047\243\001\002\000\004\015\264\001\002\000\006" +
    "\003\244\015\245\001\002\000\012\011\042\041\044\042" +
    "\046\047\047\001\002\000\012\011\042\041\044\042\046" +
    "\047\047\001\002\000\004\016\247\001\002\000\004\017" +
    "\250\001\002\000\032\003\024\010\013\012\031\014\012" +
    "\025\022\030\026\032\uffeb\034\023\043\011\044\027\045" +
    "\032\047\010\001\002\000\004\032\252\001\002\000\004" +
    "\047\253\001\002\000\004\020\254\001\002\000\010\002" +
    "\ufffd\003\ufffd\004\ufffd\001\002\000\004\016\256\001\002" +
    "\000\004\017\257\001\002\000\032\003\024\010\013\012" +
    "\031\014\012\025\022\030\026\032\uffeb\034\023\043\011" +
    "\044\027\045\032\047\010\001\002\000\004\032\261\001" +
    "\002\000\004\047\262\001\002\000\004\020\263\001\002" +
    "\000\010\002\ufffa\003\ufffa\004\ufffa\001\002\000\012\011" +
    "\042\041\044\042\046\047\047\001\002\000\004\016\266" +
    "\001\002\000\004\017\267\001\002\000\032\003\024\010" +
    "\013\012\031\014\012\025\022\030\026\032\uffeb\034\023" +
    "\043\011\044\027\045\032\047\010\001\002\000\004\032" +
    "\271\001\002\000\004\047\272\001\002\000\004\020\273" +
    "\001\002\000\010\002\ufffb\003\ufffb\004\ufffb\001\002\000" +
    "\010\020\ufff0\032\ufff0\036\ufff0\001\002\000\010\020\uffed" +
    "\032\uffed\036\uffed\001\002\000\010\020\uffec\032\uffec\036" +
    "\uffec\001\002\000\010\020\ufff2\032\ufff2\036\ufff2\001\002" +
    "\000\010\020\uffef\032\uffef\036\uffef\001\002\000\004\021" +
    "\316\001\002\000\006\003\303\021\304\001\002\000\010" +
    "\011\136\040\141\047\140\001\002\000\010\011\136\040" +
    "\141\047\140\001\002\000\006\003\306\021\307\001\002" +
    "\000\004\016\312\001\002\000\006\003\310\016\311\001" +
    "\002\000\036\003\uffcc\010\uffcc\012\uffcc\014\uffcc\020\uffcc" +
    "\025\uffcc\030\uffcc\032\uffcc\034\uffcc\036\uffcc\043\uffcc\044" +
    "\uffcc\045\uffcc\047\uffcc\001\002\000\036\003\uffd1\010\uffd1" +
    "\012\uffd1\014\uffd1\020\uffd1\025\uffd1\030\uffd1\032\uffd1\034" +
    "\uffd1\036\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1\001\002" +
    "\000\036\003\uffce\010\uffce\012\uffce\014\uffce\020\uffce\025" +
    "\uffce\030\uffce\032\uffce\034\uffce\036\uffce\043\uffce\044\uffce" +
    "\045\uffce\047\uffce\001\002\000\004\021\314\001\002\000" +
    "\004\016\315\001\002\000\036\003\uffcf\010\uffcf\012\uffcf" +
    "\014\uffcf\020\uffcf\025\uffcf\030\uffcf\032\uffcf\034\uffcf\036" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\047\uffcf\001\002\000\010" +
    "\011\136\040\141\047\140\001\002\000\004\021\320\001" +
    "\002\000\004\016\321\001\002\000\036\003\uffcd\010\uffcd" +
    "\012\uffcd\014\uffcd\020\uffcd\025\uffcd\030\uffcd\032\uffcd\034" +
    "\uffcd\036\uffcd\043\uffcd\044\uffcd\045\uffcd\047\uffcd\001\002" +
    "\000\012\011\042\041\044\042\046\047\047\001\002\000" +
    "\004\016\324\001\002\000\004\017\325\001\002\000\032" +
    "\003\024\010\013\012\031\014\012\020\uffeb\025\022\030" +
    "\026\034\023\043\011\044\027\045\032\047\010\001\002" +
    "\000\004\020\327\001\002\000\036\003\uffdc\010\uffdc\012" +
    "\uffdc\014\uffdc\020\uffdc\025\uffdc\030\uffdc\032\uffdc\034\uffdc" +
    "\036\uffdc\043\uffdc\044\uffdc\045\uffdc\047\uffdc\001\002\000" +
    "\004\046\331\001\002\000\004\011\332\001\002\000\036" +
    "\003\uffe7\010\uffe7\012\uffe7\014\uffe7\020\uffe7\025\uffe7\030" +
    "\uffe7\032\uffe7\034\uffe7\036\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\047\uffe7\001\002\000\012\011\042\041\044\042\046\047" +
    "\047\001\002\000\004\016\335\001\002\000\036\003\ufff9" +
    "\010\ufff9\012\ufff9\014\ufff9\020\ufff9\025\ufff9\030\ufff9\032" +
    "\ufff9\034\ufff9\036\ufff9\043\ufff9\044\ufff9\045\ufff9\047\ufff9" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\013\007\020" +
    "\013\016\014\027\015\017\021\015\022\024\023\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\013\007\277\013\016\014" +
    "\027\015\017\021\015\022\024\023\014\001\001\000\022" +
    "\005\013\007\276\013\016\014\027\015\017\021\015\022" +
    "\024\023\014\001\001\000\022\005\013\007\275\013\016" +
    "\014\027\015\017\021\015\022\024\023\014\001\001\000" +
    "\022\005\013\007\274\013\016\014\027\015\017\021\015" +
    "\022\024\023\014\001\001\000\022\005\013\007\273\013" +
    "\016\014\027\015\017\021\015\022\024\023\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\013\007\121\013\016\014\027" +
    "\015\017\021\015\022\024\023\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\013\007\070\013\016" +
    "\014\027\015\017\021\015\022\024\023\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\044\025\063\026\040\001\001\000\010\020\044\025\042" +
    "\026\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\013\007\055\013\016\014" +
    "\027\015\017\021\015\022\024\023\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\044\025\062\026" +
    "\040\001\001\000\010\020\044\025\061\026\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\013\007\066\013\016\014\027" +
    "\015\017\021\015\022\024\023\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\013\007\103\013" +
    "\016\014\027\015\017\021\015\022\024\023\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\013\007\112\013\016\014\027\015\017\021\015\022" +
    "\024\023\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\013\007" +
    "\117\013\016\014\027\015\017\021\015\022\024\023\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\123\020\044\025\130\026\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\013\007\133\013\016\014" +
    "\027\015\017\021\015\022\024\023\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\013\007\147\013\016\014\027" +
    "\015\017\021\015\022\024\023\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\201\001\001\000\004\006\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\163\001\001\000" +
    "\002\001\001\000\004\006\165\001\001\000\002\001\001" +
    "\000\022\005\013\007\167\013\016\014\027\015\017\021" +
    "\015\022\024\023\014\001\001\000\002\001\001\000\006" +
    "\010\171\011\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\013\007\175\013\016" +
    "\014\027\015\017\021\015\022\024\023\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\213\016\212\001\001\000\004\017\240\001" +
    "\001\000\004\017\223\001\001\000\006\012\214\016\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\227\020\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\013\007\232\013\016\014\027\015\017\021\015\022\024" +
    "\023\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\237\020\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\254\020\226\001\001" +
    "\000\006\004\245\020\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\013\007\250\013\016\014\027" +
    "\015\017\021\015\022\024\023\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\013\007" +
    "\257\013\016\014\027\015\017\021\015\022\024\023\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\264\020\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\013\007" +
    "\267\013\016\014\027\015\017\021\015\022\024\023\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\312\001\001" +
    "\000\004\002\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\044\025" +
    "\322\026\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\013\007\325\013\016\014\027\015\017\021" +
    "\015\022\024\023\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\333\020\226\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("En la linea: " + (s.left) + " y Columna: " +(s.right)+ " con el simbolo= "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPCONDICION ::= TKN_IGUAL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPCONDICION ::= TKN_OPREL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("CONDICIONP",parser.cont);
                parser.cont++;
                nodo.addHijo(v);
                nodo.addHijo(o);
                nodo.addHijo(v2);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICION ::= CONDICIONP 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICION ::= CONDICIONP TKN_OR CONDICION 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(o);
                RESULT=nodo;              
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICION ::= CONDICIONP TKN_AND CONDICION 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALOR ::= TKN_ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALOR ::= TKN_FALSE 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALOR ::= TKN_TRUE 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALOR ::= TKN_DIGITO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOPRI ::= TKN_LETRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOPRI ::= TKN_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOPRI ::= TKN_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IMPRIMIR ::= TKN_IMPRIMIR TKN_PARENTESISI TKN_COMILLA TIPOPRI TKN_COMILLA error 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta un ')' \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IMPRIMIR ::= TKN_IMPRIMIR error TKN_COMILLA TIPOPRI TKN_COMILLA TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta un '(' \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IMPRIMIR ::= TKN_IMPRIMIR TKN_PARENTESISI TKN_COMILLA TIPOPRI error TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta una '\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMPRIMIR ::= TKN_IMPRIMIR TKN_PARENTESISI error TIPOPRI TKN_COMILLA TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta una '\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IMPRIMIR ::= error TKN_PARENTESISI TKN_COMILLA TIPOPRI TKN_COMILLA TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta un sout\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IMPRIMIR ::= TKN_IMPRIMIR TKN_PARENTESISI TKN_COMILLA TIPOPRI TKN_COMILLA TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.gramas.add("Una Impresion Reconocida satisfactoriamente");
    Nodo nodo = new Nodo("SOUT",parser.cont);
    parser.cont++;
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASOS ::= TKN_DEFAULT TKN_DOSPUNTOS STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo("DEFAULT",parser.cont);
        parser.cont++;
        nodo.addHijo(s);
        RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASOS ::= CASOSA 
            {
              Nodo RESULT =null;
		int casleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo cas = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo= new Nodo("SubCaso:",parser.cont);
    parser.cont++;    
    nodo.addHijo(cas);
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASOSA ::= TKN_CASE TIPOSW TKN_DOSPUNTOS STATEMENTS TKN_ENDCASE CASOS 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ca = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo = new Nodo("Caso:" ,parser.cont);
    parser.cont++;
    nodo.addHijo(t);
    nodo.addHijo(s);
    nodo.addHijo(ca);
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOSA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOSW ::= TKN_DIGITO 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo = new Nodo(s.toString(),parser.cont);
    parser.cont++;
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSW",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOSW ::= TKN_LETRA 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo = new Nodo(s.toString(),parser.cont);
    parser.cont++;
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSW",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOSW ::= TKN_ID 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo = new Nodo(s.toString(),parser.cont);
    parser.cont++;
    RESULT=nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSW",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SWITCH ::= TKN_SWITCH TKN_PARENTESISI error TKN_PARENTESISD TKN_LLAVEIZ 
            {
              Nodo RESULT =null;
		parser.errores.add(" no ingreso un tipo valido en el switch\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SWITCH ::= TKN_SWITCH error TIPOSW TKN_PARENTESISD TKN_LLAVEIZ 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta un ( \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SWITCH ::= error TKN_PARENTESISI TIPOSW TKN_PARENTESISD TKN_LLAVEIZ 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta el enunciado switch\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SWITCH ::= TKN_SWITCH TKN_PARENTESISI TIPOSW TKN_PARENTESISD TKN_LLAVEIZ CASOSA TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int casright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo cas = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Un Bloque Switch Reconocido satisfactoriamente");
        Nodo nodo= new Nodo("SWITCH",parser.cont);
        parser.cont++;
        nodo.addHijo(s);
        nodo.addHijo(cas);
        RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // WHILE ::= TKN_WHILE TKN_PARENTESISI CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Un Bloque While Reconocido satisfactoriamente");
        Nodo nodo = new Nodo("WHILE",parser.cont);
        parser.cont++;
        nodo.addHijo(C);
        nodo.addHijo(s);
        RESULT=nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_ARGS ::= VALOR TKN_COMA LISTA_ARGS 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo =new Nodo("ARGUMENTOS",parser.cont);
            parser.cont++;
            nodo.addHijo(v);
            nodo.addHijo(s);
            RESULT= nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_ARGS ::= VALOR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("ARGUMENTOS",parser.cont);
            parser.cont++;
            nodo.addHijo(v);
            RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FOR ::= TKN_FOR TKN_PARENTESISI TKN_DIGITO error TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta poner '::'en el for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FOR ::= TKN_FOR TKN_PARENTESISI error TKN_DOSPUNTOS TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta poner un valor de inicio en el for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FOR ::= error TKN_PARENTESISI TKN_DIGITO TKN_DOSPUNTOS TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta poner FOR ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FOR ::= TKN_FOR TKN_PARENTESISI TKN_DIGITO TKN_DOSPUNTOS TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object dos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int di2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int di2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object di2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.gramas.add("Un Bloque FOR Reconocido satisfactoriamente");
        Nodo nodo = new Nodo("FOR",parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(di.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(new Nodo (dos.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(new Nodo (di2.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(s);    
        RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= TKN_FLOAT TKN_ID TKN_ASIGNACCION TKN_DIGITOFLOAT 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= TKN_CHAR TKN_ID TKN_ASIGNACCION TKN_LETRA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= TKN_BOOLEAN TKN_ID TKN_ASIGNACCION TKN_FALSE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= TKN_BOOLEAN TKN_ID TKN_ASIGNACCION TKN_TRUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= TKN_INT TKN_ID TKN_ASIGNACCION TKN_DIGITO 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
    Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IF ::= TKN_IF error CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add("Falta poner '(' ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IF ::= error TKN_PARENTESISI CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add("Falta poner 'IF' ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF ::= TKN_IF TKN_PARENTESISI CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		int di2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int di2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo di2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.gramas.add("Un Bloque IF Reconocido satisfactoriamente");
    Nodo nodo= new Nodo("IF",parser.cont);
    parser.cont++;
    nodo.addHijo(di2);
    nodo.addHijo(s);
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENTS ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("VACIO",parser.cont++));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTS ::= IMPRIMIR STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENTS ::= SWITCH STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENTS ::= LLAMADO STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENTS ::= WHILE STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENTS ::= IF STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENTS ::= FOR STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENTS ::= DECLARACION STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= error 
            {
              Nodo RESULT =null;
		parser.errores.add("No se puso un tipo valido de funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= TKN_FLOAT 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO ::= TKN_BOOLEAN 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= TKN_CHAR 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= TKN_INT 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= TKN_VOID 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LLAMADO ::= TKN_ID TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo li = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.gramas.add("Un Llamado de Funcion Reconocido satisfactoriamente");
                Nodo nodo = new Nodo("LLAMADO",parser.cont);
                parser.cont++;                
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(li);
                RESULT=nodo;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= TKN_FUNCION TIPO TKN_ID error LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add("No se puso un '(' en funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION ::= TKN_FUNCION TIPO error TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add("No se puso un ID valido de funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= error TIPO TKN_ID TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		parser.errores.add("Falta poner 'Fun' ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION ::= TKN_FUNCION TIPO TKN_ID TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo lis = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.gramas.add("Una Funcion Reconocida satisfactoriamente");
                
                Nodo nodo = new Nodo(id.toString(),parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(lis);
                
                nodo.addHijo(b);//statements
         
                RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("FUNCION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);   
                nodo.addHijo(i);
                System.out.println("nodo i");
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= TKN_MAIN TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER FUNCIONES 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.gramas.add("Bloque Main Reconocido satisfactoriamente");
        System.out.println(id);
        Nodo nodo = new Nodo(id.toString(),parser.cont);
        parser.cont++;
        nodo.addHijo(b);
        System.out.println("nodo b");
        nodo.addHijo(d); 
        System.out.println("nodo d");       
        parser.raiz=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

