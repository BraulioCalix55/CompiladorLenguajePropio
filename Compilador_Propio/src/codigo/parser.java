
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 27 23:43:20 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 27 23:43:20 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\022\007\000\002\024" +
    "\004\000\002\024\002\000\002\006\015\000\002\006\015" +
    "\000\002\006\015\000\002\006\015\000\002\015\006\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\023\002\000\002\007\011\000\002\007\011\000\002" +
    "\007\011\000\002\026\006\000\002\026\006\000\002\026" +
    "\006\000\002\026\006\000\002\011\013\000\002\011\013" +
    "\000\002\011\013\000\002\011\013\000\002\020\003\000" +
    "\002\020\005\000\002\010\011\000\002\027\002\000\002" +
    "\012\012\000\002\012\007\000\002\012\007\000\002\012" +
    "\007\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\004\010\000\002\005\003\000\002\005\005\000" +
    "\002\025\010\000\002\025\010\000\002\025\010\000\002" +
    "\025\010\000\002\025\010\000\002\025\010\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\003\000\002\017\005\000" +
    "\002\021\003\000\002\021\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\004\007\004\001\002\000\004\020\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\030\003\023\011\013\013\030\015\012\021\uffeb\027" +
    "\025\033\022\042\011\043\026\044\031\046\010\001\002" +
    "\000\004\016\330\001\002\000\004\046\325\001\002\000" +
    "\004\016\317\001\002\000\006\003\276\016\277\001\002" +
    "\000\034\003\023\011\013\013\030\015\012\021\uffeb\027" +
    "\025\031\uffeb\033\022\035\uffeb\042\011\043\026\044\031" +
    "\046\010\001\002\000\034\003\023\011\013\013\030\015" +
    "\012\021\uffeb\027\025\031\uffeb\033\022\035\uffeb\042\011" +
    "\043\026\044\031\046\010\001\002\000\034\003\023\011" +
    "\013\013\030\015\012\021\uffeb\027\025\031\uffeb\033\022" +
    "\035\uffeb\042\011\043\026\044\031\046\010\001\002\000" +
    "\034\003\023\011\013\013\030\015\012\021\uffeb\027\025" +
    "\031\uffeb\033\022\035\uffeb\042\011\043\026\044\031\046" +
    "\010\001\002\000\034\003\023\011\013\013\030\015\012" +
    "\021\uffeb\027\025\031\uffeb\033\022\035\uffeb\042\011\043" +
    "\026\044\031\046\010\001\002\000\004\021\205\001\002" +
    "\000\006\003\153\016\154\001\002\000\004\016\122\001" +
    "\002\000\034\003\023\011\013\013\030\015\012\021\uffeb" +
    "\027\025\031\uffeb\033\022\035\uffeb\042\011\043\026\044" +
    "\031\046\010\001\002\000\004\016\074\001\002\000\004" +
    "\046\071\001\002\000\034\003\023\011\013\013\030\015" +
    "\012\021\uffeb\027\025\031\uffeb\033\022\035\uffeb\042\011" +
    "\043\026\044\031\046\010\001\002\000\006\003\036\016" +
    "\037\001\002\000\004\046\032\001\002\000\004\045\033" +
    "\001\002\000\006\040\034\041\035\001\002\000\034\003" +
    "\uffe5\011\uffe5\013\uffe5\015\uffe5\021\uffe5\027\uffe5\031\uffe5" +
    "\033\uffe5\035\uffe5\042\uffe5\043\uffe5\044\uffe5\046\uffe5\001" +
    "\002\000\034\003\uffe6\011\uffe6\013\uffe6\015\uffe6\021\uffe6" +
    "\027\uffe6\031\uffe6\033\uffe6\035\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\046\uffe6\001\002\000\012\012\041\040\043\041\045" +
    "\046\046\001\002\000\012\012\041\040\043\041\045\046" +
    "\046\001\002\000\010\010\057\017\uffc6\023\060\001\002" +
    "\000\016\005\uffc2\006\uffc2\010\uffc2\017\uffc2\023\uffc2\025" +
    "\uffc2\001\002\000\004\017\053\001\002\000\016\005\uffc0" +
    "\006\uffc0\010\uffc0\017\uffc0\023\uffc0\025\uffc0\001\002\000" +
    "\006\006\047\025\051\001\002\000\016\005\uffc1\006\uffc1" +
    "\010\uffc1\017\uffc1\023\uffc1\025\uffc1\001\002\000\016\005" +
    "\uffbf\006\uffbf\010\uffbf\017\uffbf\023\uffbf\025\uffbf\001\002" +
    "\000\012\012\uffc3\040\uffc3\041\uffc3\046\uffc3\001\002\000" +
    "\012\012\041\040\043\041\045\046\046\001\002\000\012" +
    "\012\uffc4\040\uffc4\041\uffc4\046\uffc4\001\002\000\010\010" +
    "\uffc5\017\uffc5\023\uffc5\001\002\000\004\020\054\001\002" +
    "\000\030\003\023\011\013\013\030\015\012\021\uffeb\027" +
    "\025\033\022\042\011\043\026\044\031\046\010\001\002" +
    "\000\004\021\056\001\002\000\034\003\uffea\011\uffea\013" +
    "\uffea\015\uffea\021\uffea\027\uffea\031\uffea\033\uffea\035\uffea" +
    "\042\uffea\043\uffea\044\uffea\046\uffea\001\002\000\012\012" +
    "\041\040\043\041\045\046\046\001\002\000\012\012\041" +
    "\040\043\041\045\046\046\001\002\000\004\017\uffc8\001" +
    "\002\000\004\017\uffc7\001\002\000\004\017\064\001\002" +
    "\000\004\020\065\001\002\000\030\003\023\011\013\013" +
    "\030\015\012\021\uffeb\027\025\033\022\042\011\043\026" +
    "\044\031\046\010\001\002\000\004\021\067\001\002\000" +
    "\034\003\uffe8\011\uffe8\013\uffe8\015\uffe8\021\uffe8\027\uffe8" +
    "\031\uffe8\033\uffe8\035\uffe8\042\uffe8\043\uffe8\044\uffe8\046" +
    "\uffe8\001\002\000\010\021\ufff1\031\ufff1\035\ufff1\001\002" +
    "\000\004\045\072\001\002\000\004\037\073\001\002\000" +
    "\034\003\uffe4\011\uffe4\013\uffe4\015\uffe4\021\uffe4\027\uffe4" +
    "\031\uffe4\033\uffe4\035\uffe4\042\uffe4\043\uffe4\044\uffe4\046" +
    "\uffe4\001\002\000\006\003\076\012\075\001\002\000\006" +
    "\003\105\032\106\001\002\000\004\032\077\001\002\000" +
    "\004\012\100\001\002\000\004\017\101\001\002\000\004" +
    "\020\102\001\002\000\030\003\023\011\013\013\030\015" +
    "\012\021\uffeb\027\025\033\022\042\011\043\026\044\031" +
    "\046\010\001\002\000\004\021\104\001\002\000\034\003" +
    "\uffe1\011\uffe1\013\uffe1\015\uffe1\021\uffe1\027\uffe1\031\uffe1" +
    "\033\uffe1\035\uffe1\042\uffe1\043\uffe1\044\uffe1\046\uffe1\001" +
    "\002\000\004\012\114\001\002\000\004\012\107\001\002" +
    "\000\004\017\110\001\002\000\004\020\111\001\002\000" +
    "\030\003\023\011\013\013\030\015\012\021\uffeb\027\025" +
    "\033\022\042\011\043\026\044\031\046\010\001\002\000" +
    "\004\021\113\001\002\000\034\003\uffe3\011\uffe3\013\uffe3" +
    "\015\uffe3\021\uffe3\027\uffe3\031\uffe3\033\uffe3\035\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\046\uffe3\001\002\000\004\017\115" +
    "\001\002\000\004\020\116\001\002\000\030\003\023\011" +
    "\013\013\030\015\012\021\uffeb\027\025\033\022\042\011" +
    "\043\026\044\031\046\010\001\002\000\004\021\120\001" +
    "\002\000\034\003\uffe0\011\uffe0\013\uffe0\015\uffe0\021\uffe0" +
    "\027\uffe0\031\uffe0\033\uffe0\035\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\046\uffe0\001\002\000\010\021\uffee\031\uffee\035\uffee" +
    "\001\002\000\016\012\126\022\127\037\125\040\043\041" +
    "\045\046\124\001\002\000\004\017\151\001\002\000\010" +
    "\006\uffbf\017\uffd7\025\uffbf\001\002\000\006\017\uffd6\032" +
    "\uffd6\001\002\000\012\006\uffc2\017\uffd5\025\uffc2\032\143" +
    "\001\002\000\010\012\135\037\140\046\137\001\002\000" +
    "\004\017\131\001\002\000\004\020\132\001\002\000\030" +
    "\003\023\011\013\013\030\015\012\021\uffeb\027\025\033" +
    "\022\042\011\043\026\044\031\046\010\001\002\000\004" +
    "\021\134\001\002\000\034\003\uffe9\011\uffe9\013\uffe9\015" +
    "\uffe9\021\uffe9\027\uffe9\031\uffe9\033\uffe9\035\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\046\uffe9\001\002\000\006\003\uffcb\022" +
    "\uffcb\001\002\000\004\022\141\001\002\000\006\003\uffca" +
    "\022\uffca\001\002\000\006\003\uffc9\022\uffc9\001\002\000" +
    "\004\017\142\001\002\000\034\003\uffd0\011\uffd0\013\uffd0" +
    "\015\uffd0\021\uffd0\027\uffd0\031\uffd0\033\uffd0\035\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\046\uffd0\001\002\000\004\012\144" +
    "\001\002\000\004\017\145\001\002\000\004\020\146\001" +
    "\002\000\030\003\023\011\013\013\030\015\012\021\uffeb" +
    "\027\025\033\022\042\011\043\026\044\031\046\010\001" +
    "\002\000\004\021\150\001\002\000\034\003\uffe2\011\uffe2" +
    "\013\uffe2\015\uffe2\021\uffe2\027\uffe2\031\uffe2\033\uffe2\035" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2\001\002\000\004" +
    "\020\152\001\002\000\034\003\uffda\011\uffda\013\uffda\015" +
    "\uffda\021\uffda\027\uffda\031\uffda\033\uffda\035\uffda\042\uffda" +
    "\043\uffda\044\uffda\046\uffda\001\002\000\010\012\155\037" +
    "\125\046\157\001\002\000\012\003\156\012\155\037\125" +
    "\046\157\001\002\000\006\017\uffd5\032\uffd5\001\002\000" +
    "\004\017\200\001\002\000\006\017\uffd7\032\uffd7\001\002" +
    "\000\004\017\161\001\002\000\004\020\162\001\002\000" +
    "\004\034\uffdc\001\002\000\004\034\165\001\002\000\004" +
    "\021\177\001\002\000\010\012\155\037\125\046\157\001" +
    "\002\000\004\032\167\001\002\000\030\003\023\011\013" +
    "\013\030\015\012\027\025\033\022\035\uffeb\042\011\043" +
    "\026\044\031\046\010\001\002\000\004\035\171\001\002" +
    "\000\006\034\165\036\174\001\002\000\004\021\uffd3\001" +
    "\002\000\004\021\uffd4\001\002\000\004\032\175\001\002" +
    "\000\030\003\023\011\013\013\030\015\012\021\uffeb\027" +
    "\025\033\022\042\011\043\026\044\031\046\010\001\002" +
    "\000\004\021\uffd2\001\002\000\034\003\uffdb\011\uffdb\013" +
    "\uffdb\015\uffdb\021\uffdb\027\uffdb\031\uffdb\033\uffdb\035\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\046\uffdb\001\002\000\004\020" +
    "\201\001\002\000\034\003\uffd8\011\uffd8\013\uffd8\015\uffd8" +
    "\021\uffd8\027\uffd8\031\uffd8\033\uffd8\035\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\046\uffd8\001\002\000\004\017\203\001\002" +
    "\000\004\020\204\001\002\000\034\003\uffd9\011\uffd9\013" +
    "\uffd9\015\uffd9\021\uffd9\027\uffd9\031\uffd9\033\uffd9\035\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\046\uffd9\001\002\000\010\002" +
    "\ufffe\003\207\004\206\001\002\000\016\003\216\014\215" +
    "\030\214\042\217\043\213\044\220\001\002\000\016\003" +
    "\216\014\215\030\214\042\217\043\213\044\220\001\002" +
    "\000\010\002\ufffe\003\207\004\206\001\002\000\004\002" +
    "\000\001\002\000\004\002\uffff\001\002\000\006\003\ufff6" +
    "\046\ufff6\001\002\000\006\003\ufff8\046\ufff8\001\002\000" +
    "\006\003\ufff4\046\ufff4\001\002\000\006\003\ufff3\046\ufff3" +
    "\001\002\000\006\003\ufff7\046\ufff7\001\002\000\006\003" +
    "\ufff5\046\ufff5\001\002\000\004\046\222\001\002\000\004" +
    "\016\223\001\002\000\012\012\041\040\043\041\045\046" +
    "\046\001\002\000\006\005\234\017\uffdf\001\002\000\004" +
    "\017\226\001\002\000\004\020\227\001\002\000\030\003" +
    "\023\011\013\013\030\015\012\027\025\031\uffeb\033\022" +
    "\042\011\043\026\044\031\046\010\001\002\000\004\031" +
    "\231\001\002\000\004\046\232\001\002\000\004\021\233" +
    "\001\002\000\010\002\ufffc\003\ufffc\004\ufffc\001\002\000" +
    "\012\012\041\040\043\041\045\046\046\001\002\000\004" +
    "\017\uffde\001\002\000\006\003\237\046\240\001\002\000" +
    "\004\016\261\001\002\000\006\003\241\016\242\001\002" +
    "\000\012\012\041\040\043\041\045\046\046\001\002\000" +
    "\012\012\041\040\043\041\045\046\046\001\002\000\004" +
    "\017\244\001\002\000\004\020\245\001\002\000\030\003" +
    "\023\011\013\013\030\015\012\027\025\031\uffeb\033\022" +
    "\042\011\043\026\044\031\046\010\001\002\000\004\031" +
    "\247\001\002\000\004\046\250\001\002\000\004\021\251" +
    "\001\002\000\010\002\ufffd\003\ufffd\004\ufffd\001\002\000" +
    "\004\017\253\001\002\000\004\020\254\001\002\000\030" +
    "\003\023\011\013\013\030\015\012\027\025\031\uffeb\033" +
    "\022\042\011\043\026\044\031\046\010\001\002\000\004" +
    "\031\256\001\002\000\004\046\257\001\002\000\004\021" +
    "\260\001\002\000\010\002\ufffa\003\ufffa\004\ufffa\001\002" +
    "\000\012\012\041\040\043\041\045\046\046\001\002\000" +
    "\004\017\263\001\002\000\004\020\264\001\002\000\030" +
    "\003\023\011\013\013\030\015\012\027\025\031\uffeb\033" +
    "\022\042\011\043\026\044\031\046\010\001\002\000\004" +
    "\031\266\001\002\000\004\046\267\001\002\000\004\021" +
    "\270\001\002\000\010\002\ufffb\003\ufffb\004\ufffb\001\002" +
    "\000\010\021\ufff0\031\ufff0\035\ufff0\001\002\000\010\021" +
    "\uffed\031\uffed\035\uffed\001\002\000\010\021\uffec\031\uffec" +
    "\035\uffec\001\002\000\010\021\ufff2\031\ufff2\035\ufff2\001" +
    "\002\000\010\021\uffef\031\uffef\035\uffef\001\002\000\004" +
    "\022\313\001\002\000\006\003\300\022\301\001\002\000" +
    "\010\012\135\037\140\046\137\001\002\000\010\012\135" +
    "\037\140\046\137\001\002\000\006\003\303\022\304\001" +
    "\002\000\004\017\307\001\002\000\006\003\305\017\306" +
    "\001\002\000\034\003\uffcc\011\uffcc\013\uffcc\015\uffcc\021" +
    "\uffcc\027\uffcc\031\uffcc\033\uffcc\035\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\046\uffcc\001\002\000\034\003\uffd1\011\uffd1\013" +
    "\uffd1\015\uffd1\021\uffd1\027\uffd1\031\uffd1\033\uffd1\035\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\046\uffd1\001\002\000\034\003" +
    "\uffce\011\uffce\013\uffce\015\uffce\021\uffce\027\uffce\031\uffce" +
    "\033\uffce\035\uffce\042\uffce\043\uffce\044\uffce\046\uffce\001" +
    "\002\000\004\022\311\001\002\000\004\017\312\001\002" +
    "\000\034\003\uffcf\011\uffcf\013\uffcf\015\uffcf\021\uffcf\027" +
    "\uffcf\031\uffcf\033\uffcf\035\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\046\uffcf\001\002\000\010\012\135\037\140\046\137\001" +
    "\002\000\004\022\315\001\002\000\004\017\316\001\002" +
    "\000\034\003\uffcd\011\uffcd\013\uffcd\015\uffcd\021\uffcd\027" +
    "\uffcd\031\uffcd\033\uffcd\035\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\046\uffcd\001\002\000\012\012\041\040\043\041\045\046" +
    "\046\001\002\000\004\017\321\001\002\000\004\020\322" +
    "\001\002\000\030\003\023\011\013\013\030\015\012\021" +
    "\uffeb\027\025\033\022\042\011\043\026\044\031\046\010" +
    "\001\002\000\004\021\324\001\002\000\034\003\uffdd\011" +
    "\uffdd\013\uffdd\015\uffdd\021\uffdd\027\uffdd\031\uffdd\033\uffdd" +
    "\035\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd\001\002\000" +
    "\004\045\326\001\002\000\004\012\327\001\002\000\034" +
    "\003\uffe7\011\uffe7\013\uffe7\015\uffe7\021\uffe7\027\uffe7\031" +
    "\uffe7\033\uffe7\035\uffe7\042\uffe7\043\uffe7\044\uffe7\046\uffe7" +
    "\001\002\000\012\012\041\040\043\041\045\046\046\001" +
    "\002\000\004\017\332\001\002\000\034\003\ufff9\011\ufff9" +
    "\013\ufff9\015\ufff9\021\ufff9\027\ufff9\031\ufff9\033\ufff9\035" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\046\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\004\022\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\017\010\013" +
    "\011\026\012\016\015\023\023\020\025\015\026\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\017\010\013\011\026\012" +
    "\016\015\023\023\274\025\015\026\014\001\001\000\022" +
    "\007\017\010\013\011\026\012\016\015\023\023\273\025" +
    "\015\026\014\001\001\000\022\007\017\010\013\011\026" +
    "\012\016\015\023\023\272\025\015\026\014\001\001\000" +
    "\022\007\017\010\013\011\026\012\016\015\023\023\271" +
    "\025\015\026\014\001\001\000\022\007\017\010\013\011" +
    "\026\012\016\015\023\023\270\025\015\026\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\017\010\013\011\026\012\016\015\023\023\120" +
    "\025\015\026\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\007\017\010\013\011\026\012\016\015\023" +
    "\023\067\025\015\026\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\043\016\062\017" +
    "\037\001\001\000\010\014\043\016\041\017\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\007\017\010\013\011\026\012\016\015\023\023" +
    "\054\025\015\026\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\043\016\061\017\037\001\001\000" +
    "\010\014\043\016\060\017\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\017\010\013\011\026\012\016\015\023\023\065" +
    "\025\015\026\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\017\010\013\011\026\012\016\015" +
    "\023\023\102\025\015\026\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\017\010\013" +
    "\011\026\012\016\015\023\023\111\025\015\026\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\017\010\013\011\026\012" +
    "\016\015\023\023\116\025\015\026\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\122\014\043\016\127\017\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\007\017\010\013\011\026\012\016\015\023\023" +
    "\132\025\015\026\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\017\010\013\011\026\012\016\015\023\023\146" +
    "\025\015\026\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\201" +
    "\001\001\000\004\002\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\162\001\001\000\004\004\163\001" +
    "\001\000\002\001\001\000\004\002\165\001\001\000\002" +
    "\001\001\000\022\007\017\010\013\011\026\012\016\015" +
    "\023\023\167\025\015\026\014\001\001\000\002\001\001" +
    "\000\006\004\171\005\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\017\010\013" +
    "\011\026\012\016\015\023\023\175\025\015\026\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\207\024\210\001\001\000\004" +
    "\013\235\001\001\000\004\013\220\001\001\000\006\006" +
    "\207\024\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\223\020\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\007\017\010\013\011\026\012\016\015\023\023" +
    "\227\025\015\026\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\223\020\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\223\020" +
    "\251\001\001\000\006\014\223\020\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\007\017\010\013\011" +
    "\026\012\016\015\023\023\245\025\015\026\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\007\017\010\013\011\026\012\016\015\023\023\254\025" +
    "\015\026\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\223\020" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\007\017\010\013\011\026\012\016\015\023\023\264\025" +
    "\015\026\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\307\001\001\000\004\003\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\043\016\317\017\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\007\017\010\013\011\026\012\016" +
    "\015\023\023\322\025\015\026\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\223\020\330\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("En la linea: " + (s.left) + " y Columna: " +(s.right)+ " con el simbolo= "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALOR ::= TKN_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALOR ::= TKN_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALOR ::= TKN_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALOR ::= TKN_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPCONDICION ::= TKN_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPCONDICION ::= TKN_OPREL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICION ::= CONDICIONP TKN_OR CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICION ::= CONDICIONP TKN_AND CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOPRI ::= TKN_LETRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOPRI ::= TKN_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOPRI ::= TKN_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IMPRIMIR ::= TKN_IMPRIMIR TKN_PARENTESISI TKN_COMILLA TIPOPRI TKN_COMILLA error 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta un ')' \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IMPRIMIR ::= TKN_IMPRIMIR error TKN_COMILLA TIPOPRI TKN_COMILLA TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta un '(' \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IMPRIMIR ::= TKN_IMPRIMIR TKN_PARENTESISI TKN_COMILLA TIPOPRI error TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta una '\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMPRIMIR ::= TKN_IMPRIMIR TKN_PARENTESISI error TIPOPRI TKN_COMILLA TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta una '\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IMPRIMIR ::= error TKN_PARENTESISI TKN_COMILLA TIPOPRI TKN_COMILLA TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta un sout\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IMPRIMIR ::= TKN_IMPRIMIR TKN_PARENTESISI TKN_COMILLA TIPOPRI TKN_COMILLA TKN_PARENTESISD 
            {
              Nodo RESULT =null;
		parser.gramas.add("Una Impresion Reconocida satisfactoriamente");
    Nodo nodo = new Nodo("SOUT",parser.cont);
    parser.cont++;
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASOS ::= TKN_DEFAULT TKN_DOSPUNTOS STATEMENTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASOS ::= CASOSA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASOSA ::= TKN_CASE TIPOSW TKN_DOSPUNTOS STATEMENTS TKN_ENDCASE CASOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOSA",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOSW ::= TKN_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSW",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOSW ::= TKN_LETRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSW",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOSW ::= TKN_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSW",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SWITCH ::= TKN_SWITCH TKN_PARENTESISI error TKN_PARENTESISD TKN_LLAVEIZ 
            {
              Object RESULT =null;
		parser.errores.add(" no ingreso un tipo valido en el switch\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SWITCH ::= TKN_SWITCH error TIPOSW TKN_PARENTESISD TKN_LLAVEIZ 
            {
              Object RESULT =null;
		parser.errores.add(" Falta un ( \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SWITCH ::= error TKN_PARENTESISI TIPOSW TKN_PARENTESISD TKN_LLAVEIZ 
            {
              Object RESULT =null;
		parser.errores.add(" Falta el enunciado switch\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SWITCH ::= TKN_SWITCH TKN_PARENTESISI TIPOSW TKN_PARENTESISD TKN_LLAVEIZ NT$0 CASOSA TKN_LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$0 ::= 
            {
              Object RESULT =null;
parser.gramas.add("Un Bloque Switch Reconocido satisfactoriamente");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WHILE ::= TKN_WHILE TKN_PARENTESISI CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		parser.gramas.add("Un Bloque While Reconocido satisfactoriamente");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_ARGS ::= VALOR TKN_COMA LISTA_ARGS 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_ARGS ::= VALOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FOR ::= TKN_FOR TKN_PARENTESISI TKN_DIGITO error TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Object RESULT =null;
		parser.errores.add(" Falta poner '::'en el for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FOR ::= TKN_FOR TKN_PARENTESISI error TKN_DOSPUNTOS TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Object RESULT =null;
		parser.errores.add(" Falta poner un valor de inicio en el for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FOR ::= error TKN_PARENTESISI TKN_DIGITO TKN_DOSPUNTOS TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Object RESULT =null;
		parser.errores.add(" Falta poner FOR ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FOR ::= TKN_FOR TKN_PARENTESISI TKN_DIGITO TKN_DOSPUNTOS TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Object RESULT =null;
		parser.gramas.add("Un Bloque FOR Reconocido satisfactoriamente");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= TKN_CHAR TKN_ID TKN_ASIGNACCION TKN_LETRA 
            {
              Nodo RESULT =null;
		parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= TKN_BOOLEAN TKN_ID TKN_ASIGNACCION TKN_FALSE 
            {
              Nodo RESULT =null;
		parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= TKN_BOOLEAN TKN_ID TKN_ASIGNACCION TKN_TRUE 
            {
              Nodo RESULT =null;
		parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= TKN_INT TKN_ID TKN_ASIGNACCION TKN_DIGITO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Una Asignacion Reconocida satisfactoriamente");
    Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo("<--",parser.cont));
    parser.cont++;    
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IF ::= TKN_IF error CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Object RESULT =null;
		parser.errores.add("Falta poner '(' ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IF ::= error TKN_PARENTESISI CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Object RESULT =null;
		parser.errores.add("Falta poner 'IF' ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF ::= TKN_IF TKN_PARENTESISI CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.gramas.add("Un Bloque IF Reconocido satisfactoriamente");
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENTS ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("VACIO",parser.cont++));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTS ::= IMPRIMIR STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENTS ::= SWITCH STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENTS ::= LLAMADO STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENTS ::= WHILE STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENTS ::= IF STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENTS ::= FOR STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENTS ::= DECLARACION STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= error 
            {
              Object RESULT =null;
		parser.errores.add("No se puso un tipo valido de funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= TKN_DIGITOFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO ::= TKN_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= TKN_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= TKN_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= TKN_VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LLAMADO ::= TKN_ID TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD 
            {
              Object RESULT =null;
		parser.gramas.add("Un Llamado de Funcion Reconocido satisfactoriamente");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= TKN_FUNCION TIPO TKN_ID error LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER 
            {
              Object RESULT =null;
		parser.errores.add("No se puso un '(' en funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION ::= TKN_FUNCION TIPO error TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER 
            {
              Object RESULT =null;
		parser.errores.add("No se puso un ID valido de funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= error TIPO TKN_ID TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER 
            {
              Object RESULT =null;
		parser.errores.add("Falta poner 'Fun' ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION ::= TKN_FUNCION TIPO TKN_ID TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER 
            {
              Object RESULT =null;
		parser.gramas.add("Una Funcion Reconocida satisfactoriamente");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= TKN_MAIN TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER FUNCIONES 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.gramas.add("Bloque Main Reconocido satisfactoriamente");
        System.out.println(id);
        Nodo nodo = new Nodo(id.toString(),parser.cont);
        parser.cont++;
        nodo.addHijo(b);
        parser.raiz=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

