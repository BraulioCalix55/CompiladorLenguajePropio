
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 24 20:02:31 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 24 20:02:31 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\007\000\002\011" +
    "\004\000\002\011\002\000\002\030\002\000\002\013\016" +
    "\000\002\031\002\000\002\017\007\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\032\002\000\002\016" +
    "\005\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\002\000\002\033\002\000\002\020\012\000\002" +
    "\034\002\000\002\027\007\000\002\027\006\000\002\027" +
    "\006\000\002\027\006\000\002\035\002\000\002\021\014" +
    "\000\002\025\003\000\002\025\005\000\002\025\002\000" +
    "\002\036\002\000\002\007\012\000\002\037\002\000\002" +
    "\022\012\000\002\003\003\000\002\003\003\000\002\040" +
    "\002\000\002\010\011\000\002\012\003\000\002\012\005" +
    "\000\002\041\002\000\002\006\011\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\023\005\000\002" +
    "\023\005\000\002\023\003\000\002\024\005\000\002\026" +
    "\003\000\002\026\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\004\007\004\001\002\000\004\020\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\026\011\uffd4\013\uffea\015\uffde\021\uffeb\027\uffe3\033" +
    "\uffdc\042\ufff3\043\ufff3\044\ufff3\046\ufffb\001\002\000\004" +
    "\015\204\001\002\000\004\027\173\001\002\000\032\011" +
    "\uffd4\013\uffea\015\uffde\021\uffeb\027\uffe3\031\uffeb\033\uffdc" +
    "\035\uffeb\042\ufff3\043\ufff3\044\ufff3\046\ufffb\001\002\000" +
    "\004\013\151\001\002\000\032\011\uffd4\013\uffea\015\uffde" +
    "\021\uffeb\027\uffe3\031\uffeb\033\uffdc\035\uffeb\042\ufff3\043" +
    "\ufff3\044\ufff3\046\ufffb\001\002\000\010\042\uffe8\043\130" +
    "\044\132\001\002\000\004\046\124\001\002\000\032\011" +
    "\uffd4\013\uffea\015\uffde\021\uffeb\027\uffe3\031\uffeb\033\uffdc" +
    "\035\uffeb\042\ufff3\043\ufff3\044\ufff3\046\ufffb\001\002\000" +
    "\032\011\uffd4\013\uffea\015\uffde\021\uffeb\027\uffe3\031\uffeb" +
    "\033\uffdc\035\uffeb\042\ufff3\043\ufff3\044\ufff3\046\ufffb\001" +
    "\002\000\032\011\uffd4\013\uffea\015\uffde\021\uffeb\027\uffe3" +
    "\031\uffeb\033\uffdc\035\uffeb\042\ufff3\043\ufff3\044\ufff3\046" +
    "\ufffb\001\002\000\032\011\uffd4\013\uffea\015\uffde\021\uffeb" +
    "\027\uffe3\031\uffeb\033\uffdc\035\uffeb\042\ufff3\043\ufff3\044" +
    "\ufff3\046\ufffb\001\002\000\004\011\107\001\002\000\004" +
    "\033\063\001\002\000\004\021\026\001\002\000\006\002" +
    "\ufffe\004\ufffd\001\002\000\004\004\033\001\002\000\006" +
    "\002\ufffe\004\ufffd\001\002\000\004\002\000\001\002\000" +
    "\004\002\uffff\001\002\000\016\014\034\030\036\042\037" +
    "\043\035\044\040\046\041\001\002\000\004\046\ufff5\001" +
    "\002\000\004\046\ufff7\001\002\000\004\046\ufff9\001\002" +
    "\000\004\046\ufff8\001\002\000\004\046\ufff6\001\002\000" +
    "\004\046\ufff4\001\002\000\004\046\043\001\002\000\004" +
    "\016\044\001\002\000\014\012\045\017\uffdf\040\046\041" +
    "\052\046\051\001\002\000\016\005\uffc9\006\uffc9\010\uffc9" +
    "\017\uffc9\023\uffc9\025\uffc9\001\002\000\016\005\uffc7\006" +
    "\uffc7\010\uffc7\017\uffc7\023\uffc7\025\uffc7\001\002\000\006" +
    "\005\061\017\uffe1\001\002\000\004\017\053\001\002\000" +
    "\016\005\uffc6\006\uffc6\010\uffc6\017\uffc6\023\uffc6\025\uffc6" +
    "\001\002\000\016\005\uffc8\006\uffc8\010\uffc8\017\uffc8\023" +
    "\uffc8\025\uffc8\001\002\000\004\020\054\001\002\000\026" +
    "\011\uffd4\013\uffea\015\uffde\027\uffe3\031\uffeb\033\uffdc\042" +
    "\ufff3\043\ufff3\044\ufff3\046\ufffb\001\002\000\004\031\056" +
    "\001\002\000\004\046\057\001\002\000\004\021\060\001" +
    "\002\000\006\002\ufffc\004\ufffc\001\002\000\014\012\045" +
    "\017\uffdf\040\046\041\052\046\051\001\002\000\004\017" +
    "\uffe0\001\002\000\004\016\064\001\002\000\004\046\065" +
    "\001\002\000\004\017\066\001\002\000\004\020\067\001" +
    "\002\000\004\034\uffd8\001\002\000\004\021\106\001\002" +
    "\000\004\034\072\001\002\000\006\012\073\037\074\001" +
    "\002\000\004\032\uffda\001\002\000\004\032\uffd9\001\002" +
    "\000\004\032\076\001\002\000\026\011\uffd4\013\uffea\015" +
    "\uffde\027\uffe3\033\uffdc\035\uffeb\042\ufff3\043\ufff3\044\ufff3" +
    "\046\ufffb\001\002\000\004\035\100\001\002\000\006\034" +
    "\uffd8\036\103\001\002\000\004\021\uffd6\001\002\000\004" +
    "\021\uffd7\001\002\000\004\032\104\001\002\000\026\011" +
    "\uffd4\013\uffea\015\uffde\021\uffeb\027\uffe3\033\uffdc\042\ufff3" +
    "\043\ufff3\044\ufff3\046\ufffb\001\002\000\004\021\uffd5\001" +
    "\002\000\032\011\uffdb\013\uffdb\015\uffdb\021\uffdb\027\uffdb" +
    "\031\uffdb\033\uffdb\035\uffdb\042\uffdb\043\uffdb\044\uffdb\046" +
    "\uffdb\001\002\000\004\016\110\001\002\000\004\022\111" +
    "\001\002\000\010\012\112\037\115\046\114\001\002\000" +
    "\004\022\uffd2\001\002\000\004\022\116\001\002\000\004" +
    "\022\uffd1\001\002\000\004\022\uffd0\001\002\000\004\017" +
    "\117\001\002\000\032\011\uffd3\013\uffd3\015\uffd3\021\uffd3" +
    "\027\uffd3\031\uffd3\033\uffd3\035\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\046\uffd3\001\002\000\010\021\uffec\031\uffec\035\uffec" +
    "\001\002\000\010\021\uffee\031\uffee\035\uffee\001\002\000" +
    "\010\021\uffed\031\uffed\035\uffed\001\002\000\010\021\ufff0" +
    "\031\ufff0\035\ufff0\001\002\000\004\016\125\001\002\000" +
    "\014\012\045\017\uffdf\040\046\041\052\046\051\001\002" +
    "\000\004\017\127\001\002\000\032\011\ufffa\013\ufffa\015" +
    "\ufffa\021\ufffa\027\ufffa\031\ufffa\033\ufffa\035\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\046\ufffa\001\002\000\004\046\145\001" +
    "\002\000\032\011\uffd4\013\uffea\015\uffde\021\uffeb\027\uffe3" +
    "\031\uffeb\033\uffdc\035\uffeb\042\ufff3\043\ufff3\044\ufff3\046" +
    "\ufffb\001\002\000\004\046\140\001\002\000\004\042\134" +
    "\001\002\000\004\046\135\001\002\000\004\045\136\001" +
    "\002\000\004\012\137\001\002\000\032\011\uffe7\013\uffe7" +
    "\015\uffe7\021\uffe7\027\uffe7\031\uffe7\033\uffe7\035\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\046\uffe7\001\002\000\004\045\141" +
    "\001\002\000\006\040\142\041\143\001\002\000\032\011" +
    "\uffe5\013\uffe5\015\uffe5\021\uffe5\027\uffe5\031\uffe5\033\uffe5" +
    "\035\uffe5\042\uffe5\043\uffe5\044\uffe5\046\uffe5\001\002\000" +
    "\032\011\uffe6\013\uffe6\015\uffe6\021\uffe6\027\uffe6\031\uffe6" +
    "\033\uffe6\035\uffe6\042\uffe6\043\uffe6\044\uffe6\046\uffe6\001" +
    "\002\000\010\021\ufff2\031\ufff2\035\ufff2\001\002\000\004" +
    "\045\146\001\002\000\004\037\147\001\002\000\032\011" +
    "\uffe4\013\uffe4\015\uffe4\021\uffe4\027\uffe4\031\uffe4\033\uffe4" +
    "\035\uffe4\042\uffe4\043\uffe4\044\uffe4\046\uffe4\001\002\000" +
    "\010\021\ufff1\031\ufff1\035\ufff1\001\002\000\004\016\152" +
    "\001\002\000\012\012\045\040\046\041\052\046\051\001" +
    "\002\000\010\010\166\017\uffcd\023\167\001\002\000\004" +
    "\017\162\001\002\000\006\006\156\025\160\001\002\000" +
    "\012\012\uffca\040\uffca\041\uffca\046\uffca\001\002\000\012" +
    "\012\045\040\046\041\052\046\051\001\002\000\012\012" +
    "\uffcb\040\uffcb\041\uffcb\046\uffcb\001\002\000\010\010\uffcc" +
    "\017\uffcc\023\uffcc\001\002\000\004\020\163\001\002\000" +
    "\026\011\uffd4\013\uffea\015\uffde\021\uffeb\027\uffe3\033\uffdc" +
    "\042\ufff3\043\ufff3\044\ufff3\046\ufffb\001\002\000\004\021" +
    "\165\001\002\000\032\011\uffe9\013\uffe9\015\uffe9\021\uffe9" +
    "\027\uffe9\031\uffe9\033\uffe9\035\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\046\uffe9\001\002\000\012\012\045\040\046\041\052" +
    "\046\051\001\002\000\012\012\045\040\046\041\052\046" +
    "\051\001\002\000\004\017\uffcf\001\002\000\004\017\uffce" +
    "\001\002\000\010\021\uffef\031\uffef\035\uffef\001\002\000" +
    "\004\016\174\001\002\000\004\012\175\001\002\000\004" +
    "\032\176\001\002\000\004\012\177\001\002\000\004\017" +
    "\200\001\002\000\004\020\201\001\002\000\026\011\uffd4" +
    "\013\uffea\015\uffde\021\uffeb\027\uffe3\033\uffdc\042\ufff3\043" +
    "\ufff3\044\ufff3\046\ufffb\001\002\000\004\021\203\001\002" +
    "\000\032\011\uffe2\013\uffe2\015\uffe2\021\uffe2\027\uffe2\031" +
    "\uffe2\033\uffe2\035\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2" +
    "\001\002\000\004\016\205\001\002\000\012\012\045\040" +
    "\046\041\052\046\051\001\002\000\004\017\207\001\002" +
    "\000\004\020\210\001\002\000\026\011\uffd4\013\uffea\015" +
    "\uffde\021\uffeb\027\uffe3\033\uffdc\042\ufff3\043\ufff3\044\ufff3" +
    "\046\ufffb\001\002\000\004\021\212\001\002\000\032\011" +
    "\uffdd\013\uffdd\015\uffdd\021\uffdd\027\uffdd\031\uffdd\033\uffdd" +
    "\035\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\006\021\007\011" +
    "\016\024\017\020\020\016\021\013\022\017\031\015\032" +
    "\014\033\012\035\010\036\007\037\023\041\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\006\021\007" +
    "\011\016\171\017\020\020\016\021\013\022\017\031\015" +
    "\032\014\033\012\035\010\036\007\037\023\041\022\001" +
    "\001\000\002\001\001\000\036\006\021\007\011\016\147" +
    "\017\020\020\016\021\013\022\017\031\015\032\014\033" +
    "\012\035\010\036\007\037\023\041\022\001\001\000\006" +
    "\027\130\034\132\001\001\000\002\001\001\000\036\006" +
    "\021\007\011\016\122\017\020\020\016\021\013\022\017" +
    "\031\015\032\014\033\012\035\010\036\007\037\023\041" +
    "\022\001\001\000\036\006\021\007\011\016\121\017\020" +
    "\020\016\021\013\022\017\031\015\032\014\033\012\035" +
    "\010\036\007\037\023\041\022\001\001\000\036\006\021" +
    "\007\011\016\120\017\020\020\016\021\013\022\017\031" +
    "\015\032\014\033\012\035\010\036\007\037\023\041\022" +
    "\001\001\000\036\006\021\007\011\016\117\017\020\020" +
    "\016\021\013\022\017\031\015\032\014\033\012\035\010" +
    "\036\007\037\023\041\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\030\013\027" +
    "\030\026\001\001\000\002\001\001\000\010\011\031\013" +
    "\027\030\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\046\025\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\006\021" +
    "\007\011\016\054\017\020\020\016\021\013\022\017\031" +
    "\015\032\014\033\012\035\010\036\007\037\023\041\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\046\025\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\067\040\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\021\007\011\016\076\017\020\020" +
    "\016\021\013\022\017\031\015\032\014\033\012\035\010" +
    "\036\007\037\023\041\022\001\001\000\002\001\001\000" +
    "\010\010\100\012\101\040\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\006\021\007" +
    "\011\016\104\017\020\020\016\021\013\022\017\031\015" +
    "\032\014\033\012\035\010\036\007\037\023\041\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\046\025\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\006\021" +
    "\007\011\016\143\017\020\020\016\021\013\022\017\031" +
    "\015\032\014\033\012\035\010\036\007\037\023\041\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\154\023\153\024\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\156\001\001\000" +
    "\002\001\001\000\004\015\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\006\021\007" +
    "\011\016\163\017\020\020\016\021\013\022\017\031\015" +
    "\032\014\033\012\035\010\036\007\037\023\041\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\154" +
    "\023\170\024\152\001\001\000\010\015\154\023\167\024" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\021\007\011\016\201\017\020\020\016\021" +
    "\013\022\017\031\015\032\014\033\012\035\010\036\007" +
    "\037\023\041\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\154\023\205\024\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\006" +
    "\021\007\011\016\210\017\020\020\016\021\013\022\017" +
    "\031\015\032\014\033\012\035\010\036\007\037\023\041" +
    "\022\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALOR ::= TKN_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALOR ::= TKN_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALOR ::= TKN_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALOR ::= TKN_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPCONDICION ::= TKN_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPCONDICION ::= TKN_OPREL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICION ::= CONDICIONP TKN_OR CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICION ::= CONDICIONP TKN_AND CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPOPRI ::= TKN_LETRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPOPRI ::= TKN_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOPRI ::= TKN_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IMPRIMIR ::= NT$9 TKN_IMPRIMIR TKN_PARENTESISI TKN_COMILLA TIPOPRI TKN_COMILLA TKN_PARENTESISD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$9 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE sout");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASOS ::= TKN_DEFAULT TKN_DOSPUNTOS STATEMENTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASOS ::= CASOSA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASOSA ::= NT$8 TKN_CASE TIPOSW TKN_DOSPUNTOS STATEMENTS TKN_ENDCASE CASOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOSA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$8 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE CASOSABB");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPOSW ::= TKN_LETRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSW",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPOSW ::= TKN_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSW",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SWITCH ::= NT$7 TKN_SWITCH TKN_PARENTESISI TKN_ID TKN_PARENTESISD TKN_LLAVEIZ CASOSA TKN_LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$7 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE SWITCH");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WHILE ::= NT$6 TKN_WHILE TKN_PARENTESISI CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$6 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE WHILE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_ARGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_ARGS ::= VALOR TKN_COMA LISTA_ARGS 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA_ARGS ::= VALOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FOR ::= NT$5 TKN_FOR TKN_PARENTESISI TKN_DIGITO TKN_DOSPUNTOS TKN_DIGITO TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$5 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE FOR");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= TKN_CHAR TKN_ID TKN_ASIGNACCION TKN_LETRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= TKN_BOOLEAN TKN_ID TKN_ASIGNACCION TKN_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= TKN_BOOLEAN TKN_ID TKN_ASIGNACCION TKN_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= NT$4 TKN_INT TKN_ID TKN_ASIGNACCION TKN_DIGITO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$4 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE DECLARACION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IF ::= NT$3 TKN_IF TKN_PARENTESISI CONDICION TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE IF");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENTS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTS ::= IMPRIMIR STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENTS ::= SWITCH STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENTS ::= LLAMADO STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENTS ::= WHILE STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENTS ::= IF STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENTS ::= FOR STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENTS ::= NT$2 DECLARACION STATEMENTS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE statements");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= TKN_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO ::= TKN_DIGITOFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= TKN_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= TKN_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= TKN_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= TKN_VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LLAMADO ::= NT$1 TKN_ID TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE LLAMADO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= NT$0 TKN_FUNCION TIPO TKN_ID TKN_PARENTESISI LISTA_ARGS TKN_PARENTESISD TKN_LLAVEIZ STATEMENTS TKN_RETURN TKN_ID TKN_LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("DENTRO DE funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= TKN_MAIN TKN_LLAVEIZ STATEMENTS TKN_LLAVEDER FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

